
ws2812b_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c90  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003da0  08003da0  00013da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dc0  08003dc0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003dc0  08003dc0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003dc0  08003dc0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dc0  08003dc0  00013dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003dc4  08003dc4  00013dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003dc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  2000000c  08003dd4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  08003dd4  000202c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000860e  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017a0  00000000  00000000  00028643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e8  00000000  00000000  00029de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000930  00000000  00000000  0002a7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c32  00000000  00000000  0002b100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a194  00000000  00000000  00041d32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008525d  00000000  00000000  0004bec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d1123  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ae8  00000000  00000000  000d1174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08003d88 	.word	0x08003d88

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08003d88 	.word	0x08003d88

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__aeabi_d2iz>:
 8000a54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a58:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a5c:	d215      	bcs.n	8000a8a <__aeabi_d2iz+0x36>
 8000a5e:	d511      	bpl.n	8000a84 <__aeabi_d2iz+0x30>
 8000a60:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a64:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a68:	d912      	bls.n	8000a90 <__aeabi_d2iz+0x3c>
 8000a6a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a72:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a7e:	bf18      	it	ne
 8000a80:	4240      	negne	r0, r0
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d105      	bne.n	8000a9c <__aeabi_d2iz+0x48>
 8000a90:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a94:	bf08      	it	eq
 8000a96:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_d2uiz>:
 8000aa4:	004a      	lsls	r2, r1, #1
 8000aa6:	d211      	bcs.n	8000acc <__aeabi_d2uiz+0x28>
 8000aa8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aac:	d211      	bcs.n	8000ad2 <__aeabi_d2uiz+0x2e>
 8000aae:	d50d      	bpl.n	8000acc <__aeabi_d2uiz+0x28>
 8000ab0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab8:	d40e      	bmi.n	8000ad8 <__aeabi_d2uiz+0x34>
 8000aba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000abe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad6:	d102      	bne.n	8000ade <__aeabi_d2uiz+0x3a>
 8000ad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000adc:	4770      	bx	lr
 8000ade:	f04f 0000 	mov.w	r0, #0
 8000ae2:	4770      	bx	lr

08000ae4 <__aeabi_d2f>:
 8000ae4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aec:	bf24      	itt	cs
 8000aee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000af2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000af6:	d90d      	bls.n	8000b14 <__aeabi_d2f+0x30>
 8000af8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000afc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b00:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b04:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b08:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b0c:	bf08      	it	eq
 8000b0e:	f020 0001 	biceq.w	r0, r0, #1
 8000b12:	4770      	bx	lr
 8000b14:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b18:	d121      	bne.n	8000b5e <__aeabi_d2f+0x7a>
 8000b1a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b1e:	bfbc      	itt	lt
 8000b20:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b24:	4770      	bxlt	lr
 8000b26:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b2a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b2e:	f1c2 0218 	rsb	r2, r2, #24
 8000b32:	f1c2 0c20 	rsb	ip, r2, #32
 8000b36:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b3a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b3e:	bf18      	it	ne
 8000b40:	f040 0001 	orrne.w	r0, r0, #1
 8000b44:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b48:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b4c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b50:	ea40 000c 	orr.w	r0, r0, ip
 8000b54:	fa23 f302 	lsr.w	r3, r3, r2
 8000b58:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b5c:	e7cc      	b.n	8000af8 <__aeabi_d2f+0x14>
 8000b5e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b62:	d107      	bne.n	8000b74 <__aeabi_d2f+0x90>
 8000b64:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b68:	bf1e      	ittt	ne
 8000b6a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b6e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b72:	4770      	bxne	lr
 8000b74:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop

08000b84 <__aeabi_frsub>:
 8000b84:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b88:	e002      	b.n	8000b90 <__addsf3>
 8000b8a:	bf00      	nop

08000b8c <__aeabi_fsub>:
 8000b8c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b90 <__addsf3>:
 8000b90:	0042      	lsls	r2, r0, #1
 8000b92:	bf1f      	itttt	ne
 8000b94:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b98:	ea92 0f03 	teqne	r2, r3
 8000b9c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ba0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba4:	d06a      	beq.n	8000c7c <__addsf3+0xec>
 8000ba6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000baa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bae:	bfc1      	itttt	gt
 8000bb0:	18d2      	addgt	r2, r2, r3
 8000bb2:	4041      	eorgt	r1, r0
 8000bb4:	4048      	eorgt	r0, r1
 8000bb6:	4041      	eorgt	r1, r0
 8000bb8:	bfb8      	it	lt
 8000bba:	425b      	neglt	r3, r3
 8000bbc:	2b19      	cmp	r3, #25
 8000bbe:	bf88      	it	hi
 8000bc0:	4770      	bxhi	lr
 8000bc2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bc6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bce:	bf18      	it	ne
 8000bd0:	4240      	negne	r0, r0
 8000bd2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bd6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bda:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bde:	bf18      	it	ne
 8000be0:	4249      	negne	r1, r1
 8000be2:	ea92 0f03 	teq	r2, r3
 8000be6:	d03f      	beq.n	8000c68 <__addsf3+0xd8>
 8000be8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bec:	fa41 fc03 	asr.w	ip, r1, r3
 8000bf0:	eb10 000c 	adds.w	r0, r0, ip
 8000bf4:	f1c3 0320 	rsb	r3, r3, #32
 8000bf8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bfc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	d502      	bpl.n	8000c08 <__addsf3+0x78>
 8000c02:	4249      	negs	r1, r1
 8000c04:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c08:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c0c:	d313      	bcc.n	8000c36 <__addsf3+0xa6>
 8000c0e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c12:	d306      	bcc.n	8000c22 <__addsf3+0x92>
 8000c14:	0840      	lsrs	r0, r0, #1
 8000c16:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c1a:	f102 0201 	add.w	r2, r2, #1
 8000c1e:	2afe      	cmp	r2, #254	; 0xfe
 8000c20:	d251      	bcs.n	8000cc6 <__addsf3+0x136>
 8000c22:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c26:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c2a:	bf08      	it	eq
 8000c2c:	f020 0001 	biceq.w	r0, r0, #1
 8000c30:	ea40 0003 	orr.w	r0, r0, r3
 8000c34:	4770      	bx	lr
 8000c36:	0049      	lsls	r1, r1, #1
 8000c38:	eb40 0000 	adc.w	r0, r0, r0
 8000c3c:	3a01      	subs	r2, #1
 8000c3e:	bf28      	it	cs
 8000c40:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c44:	d2ed      	bcs.n	8000c22 <__addsf3+0x92>
 8000c46:	fab0 fc80 	clz	ip, r0
 8000c4a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c4e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c52:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c56:	bfaa      	itet	ge
 8000c58:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c5c:	4252      	neglt	r2, r2
 8000c5e:	4318      	orrge	r0, r3
 8000c60:	bfbc      	itt	lt
 8000c62:	40d0      	lsrlt	r0, r2
 8000c64:	4318      	orrlt	r0, r3
 8000c66:	4770      	bx	lr
 8000c68:	f092 0f00 	teq	r2, #0
 8000c6c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c70:	bf06      	itte	eq
 8000c72:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c76:	3201      	addeq	r2, #1
 8000c78:	3b01      	subne	r3, #1
 8000c7a:	e7b5      	b.n	8000be8 <__addsf3+0x58>
 8000c7c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c80:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c84:	bf18      	it	ne
 8000c86:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c8a:	d021      	beq.n	8000cd0 <__addsf3+0x140>
 8000c8c:	ea92 0f03 	teq	r2, r3
 8000c90:	d004      	beq.n	8000c9c <__addsf3+0x10c>
 8000c92:	f092 0f00 	teq	r2, #0
 8000c96:	bf08      	it	eq
 8000c98:	4608      	moveq	r0, r1
 8000c9a:	4770      	bx	lr
 8000c9c:	ea90 0f01 	teq	r0, r1
 8000ca0:	bf1c      	itt	ne
 8000ca2:	2000      	movne	r0, #0
 8000ca4:	4770      	bxne	lr
 8000ca6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000caa:	d104      	bne.n	8000cb6 <__addsf3+0x126>
 8000cac:	0040      	lsls	r0, r0, #1
 8000cae:	bf28      	it	cs
 8000cb0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cb4:	4770      	bx	lr
 8000cb6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cba:	bf3c      	itt	cc
 8000cbc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cc0:	4770      	bxcc	lr
 8000cc2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cc6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cce:	4770      	bx	lr
 8000cd0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cd4:	bf16      	itet	ne
 8000cd6:	4608      	movne	r0, r1
 8000cd8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cdc:	4601      	movne	r1, r0
 8000cde:	0242      	lsls	r2, r0, #9
 8000ce0:	bf06      	itte	eq
 8000ce2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000ce6:	ea90 0f01 	teqeq	r0, r1
 8000cea:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cee:	4770      	bx	lr

08000cf0 <__aeabi_ui2f>:
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e004      	b.n	8000d00 <__aeabi_i2f+0x8>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_i2f>:
 8000cf8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cfc:	bf48      	it	mi
 8000cfe:	4240      	negmi	r0, r0
 8000d00:	ea5f 0c00 	movs.w	ip, r0
 8000d04:	bf08      	it	eq
 8000d06:	4770      	bxeq	lr
 8000d08:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d0c:	4601      	mov	r1, r0
 8000d0e:	f04f 0000 	mov.w	r0, #0
 8000d12:	e01c      	b.n	8000d4e <__aeabi_l2f+0x2a>

08000d14 <__aeabi_ul2f>:
 8000d14:	ea50 0201 	orrs.w	r2, r0, r1
 8000d18:	bf08      	it	eq
 8000d1a:	4770      	bxeq	lr
 8000d1c:	f04f 0300 	mov.w	r3, #0
 8000d20:	e00a      	b.n	8000d38 <__aeabi_l2f+0x14>
 8000d22:	bf00      	nop

08000d24 <__aeabi_l2f>:
 8000d24:	ea50 0201 	orrs.w	r2, r0, r1
 8000d28:	bf08      	it	eq
 8000d2a:	4770      	bxeq	lr
 8000d2c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d30:	d502      	bpl.n	8000d38 <__aeabi_l2f+0x14>
 8000d32:	4240      	negs	r0, r0
 8000d34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d38:	ea5f 0c01 	movs.w	ip, r1
 8000d3c:	bf02      	ittt	eq
 8000d3e:	4684      	moveq	ip, r0
 8000d40:	4601      	moveq	r1, r0
 8000d42:	2000      	moveq	r0, #0
 8000d44:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d48:	bf08      	it	eq
 8000d4a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d4e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d52:	fabc f28c 	clz	r2, ip
 8000d56:	3a08      	subs	r2, #8
 8000d58:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d5c:	db10      	blt.n	8000d80 <__aeabi_l2f+0x5c>
 8000d5e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d62:	4463      	add	r3, ip
 8000d64:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d68:	f1c2 0220 	rsb	r2, r2, #32
 8000d6c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d70:	fa20 f202 	lsr.w	r2, r0, r2
 8000d74:	eb43 0002 	adc.w	r0, r3, r2
 8000d78:	bf08      	it	eq
 8000d7a:	f020 0001 	biceq.w	r0, r0, #1
 8000d7e:	4770      	bx	lr
 8000d80:	f102 0220 	add.w	r2, r2, #32
 8000d84:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d88:	f1c2 0220 	rsb	r2, r2, #32
 8000d8c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d90:	fa21 f202 	lsr.w	r2, r1, r2
 8000d94:	eb43 0002 	adc.w	r0, r3, r2
 8000d98:	bf08      	it	eq
 8000d9a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d9e:	4770      	bx	lr

08000da0 <__aeabi_f2iz>:
 8000da0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000da4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000da8:	d30f      	bcc.n	8000dca <__aeabi_f2iz+0x2a>
 8000daa:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000dae:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000db2:	d90d      	bls.n	8000dd0 <__aeabi_f2iz+0x30>
 8000db4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000db8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000dbc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000dc0:	fa23 f002 	lsr.w	r0, r3, r2
 8000dc4:	bf18      	it	ne
 8000dc6:	4240      	negne	r0, r0
 8000dc8:	4770      	bx	lr
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	4770      	bx	lr
 8000dd0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000dd4:	d101      	bne.n	8000dda <__aeabi_f2iz+0x3a>
 8000dd6:	0242      	lsls	r2, r0, #9
 8000dd8:	d105      	bne.n	8000de6 <__aeabi_f2iz+0x46>
 8000dda:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000dde:	bf08      	it	eq
 8000de0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000de4:	4770      	bx	lr
 8000de6:	f04f 0000 	mov.w	r0, #0
 8000dea:	4770      	bx	lr

08000dec <HAL_TIM_PWM_PulseFinishedCallback>:
uint8_t LED_Mod[MAX_LED][4];  // for brightness

int datasentflag=0;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000df4:	2100      	movs	r1, #0
 8000df6:	4805      	ldr	r0, [pc, #20]	; (8000e0c <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000df8:	f002 f932 	bl	8003060 <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 8000dfc:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000dfe:	2201      	movs	r2, #1
 8000e00:	601a      	str	r2, [r3, #0]
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000028 	.word	0x20000028
 8000e10:	200000d4 	.word	0x200000d4

08000e14 <Set_LED>:

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
 8000e20:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	b2d9      	uxtb	r1, r3
 8000e26:	4a10      	ldr	r2, [pc, #64]	; (8000e68 <Set_LED+0x54>)
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	b2d9      	uxtb	r1, r3
 8000e32:	4a0d      	ldr	r2, [pc, #52]	; (8000e68 <Set_LED+0x54>)
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	4413      	add	r3, r2
 8000e3a:	460a      	mov	r2, r1
 8000e3c:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	b2d9      	uxtb	r1, r3
 8000e42:	4a09      	ldr	r2, [pc, #36]	; (8000e68 <Set_LED+0x54>)
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	4413      	add	r3, r2
 8000e4a:	460a      	mov	r2, r1
 8000e4c:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	b2d9      	uxtb	r1, r3
 8000e52:	4a05      	ldr	r2, [pc, #20]	; (8000e68 <Set_LED+0x54>)
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	4413      	add	r3, r2
 8000e5a:	460a      	mov	r2, r1
 8000e5c:	70da      	strb	r2, [r3, #3]
}
 8000e5e:	bf00      	nop
 8000e60:	3714      	adds	r7, #20
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr
 8000e68:	200000b4 	.word	0x200000b4

08000e6c <Set_Brightness>:

#define PI 3.14159265

void Set_Brightness (int brightness)  // 0-45
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
		}
	}

#endif

}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bc80      	pop	{r7}
 8000e7c:	4770      	bx	lr
	...

08000e80 <WS2812_Send>:

uint16_t pwmData[(24*MAX_LED)+50];

void WS2812_Send (void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	e036      	b.n	8000efe <WS2812_Send+0x7e>
	{
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
 8000e90:	4a2e      	ldr	r2, [pc, #184]	; (8000f4c <WS2812_Send+0xcc>)
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	4413      	add	r3, r2
 8000e98:	785b      	ldrb	r3, [r3, #1]
 8000e9a:	041a      	lsls	r2, r3, #16
 8000e9c:	492b      	ldr	r1, [pc, #172]	; (8000f4c <WS2812_Send+0xcc>)
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	440b      	add	r3, r1
 8000ea4:	789b      	ldrb	r3, [r3, #2]
 8000ea6:	021b      	lsls	r3, r3, #8
 8000ea8:	431a      	orrs	r2, r3
 8000eaa:	4928      	ldr	r1, [pc, #160]	; (8000f4c <WS2812_Send+0xcc>)
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	440b      	add	r3, r1
 8000eb2:	78db      	ldrb	r3, [r3, #3]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	607b      	str	r3, [r7, #4]
#endif

		for (int i=23; i>=0; i--)
 8000eb8:	2317      	movs	r3, #23
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	e019      	b.n	8000ef2 <WS2812_Send+0x72>
		{
			if (color&(1<<i))
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d005      	beq.n	8000edc <WS2812_Send+0x5c>
			{
				pwmData[indx] = 60;  // 2/3 of 90
 8000ed0:	4a1f      	ldr	r2, [pc, #124]	; (8000f50 <WS2812_Send+0xd0>)
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	213c      	movs	r1, #60	; 0x3c
 8000ed6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000eda:	e004      	b.n	8000ee6 <WS2812_Send+0x66>
			}

			else pwmData[indx] = 30;  // 1/3 of 90
 8000edc:	4a1c      	ldr	r2, [pc, #112]	; (8000f50 <WS2812_Send+0xd0>)
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	211e      	movs	r1, #30
 8000ee2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	dae2      	bge.n	8000ebe <WS2812_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	3301      	adds	r3, #1
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	2b07      	cmp	r3, #7
 8000f02:	ddc5      	ble.n	8000e90 <WS2812_Send+0x10>
		}

	}

	for (int i=0; i<50; i++)
 8000f04:	2300      	movs	r3, #0
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	e00a      	b.n	8000f20 <WS2812_Send+0xa0>
	{
		pwmData[indx] = 0;
 8000f0a:	4a11      	ldr	r2, [pc, #68]	; (8000f50 <WS2812_Send+0xd0>)
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	2100      	movs	r1, #0
 8000f10:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	3301      	adds	r3, #1
 8000f18:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	2b31      	cmp	r3, #49	; 0x31
 8000f24:	ddf1      	ble.n	8000f0a <WS2812_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	4a09      	ldr	r2, [pc, #36]	; (8000f50 <WS2812_Send+0xd0>)
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4809      	ldr	r0, [pc, #36]	; (8000f54 <WS2812_Send+0xd4>)
 8000f30:	f001 ff02 	bl	8002d38 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag){};
 8000f34:	bf00      	nop
 8000f36:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <WS2812_Send+0xd8>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d0fb      	beq.n	8000f36 <WS2812_Send+0xb6>
	datasentflag = 0;
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <WS2812_Send+0xd8>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
}
 8000f44:	bf00      	nop
 8000f46:	3718      	adds	r7, #24
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	200000b4 	.word	0x200000b4
 8000f50:	200000d8 	.word	0x200000d8
 8000f54:	20000028 	.word	0x20000028
 8000f58:	200000d4 	.word	0x200000d4
 8000f5c:	00000000 	.word	0x00000000

08000f60 <rainbow_effect_left>:
	}
}

uint16_t effStep = 0;

uint8_t rainbow_effect_left() {
 8000f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f64:	b084      	sub	sp, #16
 8000f66:	af00      	add	r7, sp, #0
    // Options: rainbowlen=8, toLeft=true,
//  if(millis() - strip_0.effStart < 54 * (strip_0.effStep)) return 0x00;

  float factor1, factor2;
  uint16_t ind;
  for(uint16_t j=0;j<8;j++) {
 8000f68:	2300      	movs	r3, #0
 8000f6a:	81fb      	strh	r3, [r7, #14]
 8000f6c:	e244      	b.n	80013f8 <rainbow_effect_left+0x498>
    ind = effStep + j * 1.625;
 8000f6e:	4bc6      	ldr	r3, [pc, #792]	; (8001288 <rainbow_effect_left+0x328>)
 8000f70:	881b      	ldrh	r3, [r3, #0]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff faf2 	bl	800055c <__aeabi_i2d>
 8000f78:	4604      	mov	r4, r0
 8000f7a:	460d      	mov	r5, r1
 8000f7c:	89fb      	ldrh	r3, [r7, #14]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff faec 	bl	800055c <__aeabi_i2d>
 8000f84:	f04f 0200 	mov.w	r2, #0
 8000f88:	4bc0      	ldr	r3, [pc, #768]	; (800128c <rainbow_effect_left+0x32c>)
 8000f8a:	f7ff fb51 	bl	8000630 <__aeabi_dmul>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	460b      	mov	r3, r1
 8000f92:	4620      	mov	r0, r4
 8000f94:	4629      	mov	r1, r5
 8000f96:	f7ff f995 	bl	80002c4 <__adddf3>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	4610      	mov	r0, r2
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f7ff fd7f 	bl	8000aa4 <__aeabi_d2uiz>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	81bb      	strh	r3, [r7, #12]
    switch((int)((ind % 13) / 4.333333333333333)) {
 8000faa:	89b9      	ldrh	r1, [r7, #12]
 8000fac:	4bb8      	ldr	r3, [pc, #736]	; (8001290 <rainbow_effect_left+0x330>)
 8000fae:	fba3 2301 	umull	r2, r3, r3, r1
 8000fb2:	089a      	lsrs	r2, r3, #2
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	4413      	add	r3, r2
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	4413      	add	r3, r2
 8000fbe:	1acb      	subs	r3, r1, r3
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff faca 	bl	800055c <__aeabi_i2d>
 8000fc8:	a3ad      	add	r3, pc, #692	; (adr r3, 8001280 <rainbow_effect_left+0x320>)
 8000fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fce:	f7ff fc59 	bl	8000884 <__aeabi_ddiv>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	4610      	mov	r0, r2
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f7ff fd3b 	bl	8000a54 <__aeabi_d2iz>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	f000 815b 	beq.w	800129c <rainbow_effect_left+0x33c>
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	f300 8203 	bgt.w	80013f2 <rainbow_effect_left+0x492>
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d003      	beq.n	8000ff8 <rainbow_effect_left+0x98>
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	f000 8098 	beq.w	8001126 <rainbow_effect_left+0x1c6>
 8000ff6:	e1fc      	b.n	80013f2 <rainbow_effect_left+0x492>
      case 0: factor1 = 1.0 - ((float)(ind % 13 - 0 * 4.333333333333333) / 4.333333333333333);
 8000ff8:	89b9      	ldrh	r1, [r7, #12]
 8000ffa:	4ba5      	ldr	r3, [pc, #660]	; (8001290 <rainbow_effect_left+0x330>)
 8000ffc:	fba3 2301 	umull	r2, r3, r3, r1
 8001000:	089a      	lsrs	r2, r3, #2
 8001002:	4613      	mov	r3, r2
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	4413      	add	r3, r2
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	4413      	add	r3, r2
 800100c:	1acb      	subs	r3, r1, r3
 800100e:	b29b      	uxth	r3, r3
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff faa3 	bl	800055c <__aeabi_i2d>
 8001016:	4602      	mov	r2, r0
 8001018:	460b      	mov	r3, r1
 800101a:	4610      	mov	r0, r2
 800101c:	4619      	mov	r1, r3
 800101e:	f7ff fd61 	bl	8000ae4 <__aeabi_d2f>
 8001022:	4603      	mov	r3, r0
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff faab 	bl	8000580 <__aeabi_f2d>
 800102a:	a395      	add	r3, pc, #596	; (adr r3, 8001280 <rainbow_effect_left+0x320>)
 800102c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001030:	f7ff fc28 	bl	8000884 <__aeabi_ddiv>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	f04f 0000 	mov.w	r0, #0
 800103c:	4995      	ldr	r1, [pc, #596]	; (8001294 <rainbow_effect_left+0x334>)
 800103e:	f7ff f93f 	bl	80002c0 <__aeabi_dsub>
 8001042:	4602      	mov	r2, r0
 8001044:	460b      	mov	r3, r1
 8001046:	4610      	mov	r0, r2
 8001048:	4619      	mov	r1, r3
 800104a:	f7ff fd4b 	bl	8000ae4 <__aeabi_d2f>
 800104e:	4603      	mov	r3, r0
 8001050:	60bb      	str	r3, [r7, #8]
              factor2 = (float)((int)(ind - 0) % 13) / 4.333333333333333;
 8001052:	89b9      	ldrh	r1, [r7, #12]
 8001054:	4b8e      	ldr	r3, [pc, #568]	; (8001290 <rainbow_effect_left+0x330>)
 8001056:	fb83 2301 	smull	r2, r3, r3, r1
 800105a:	109a      	asrs	r2, r3, #2
 800105c:	17cb      	asrs	r3, r1, #31
 800105e:	1ad2      	subs	r2, r2, r3
 8001060:	4613      	mov	r3, r2
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	4413      	add	r3, r2
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	4413      	add	r3, r2
 800106a:	1aca      	subs	r2, r1, r3
 800106c:	4610      	mov	r0, r2
 800106e:	f7ff fe43 	bl	8000cf8 <__aeabi_i2f>
 8001072:	4603      	mov	r3, r0
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fa83 	bl	8000580 <__aeabi_f2d>
 800107a:	a381      	add	r3, pc, #516	; (adr r3, 8001280 <rainbow_effect_left+0x320>)
 800107c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001080:	f7ff fc00 	bl	8000884 <__aeabi_ddiv>
 8001084:	4602      	mov	r2, r0
 8001086:	460b      	mov	r3, r1
 8001088:	4610      	mov	r0, r2
 800108a:	4619      	mov	r1, r3
 800108c:	f7ff fd2a 	bl	8000ae4 <__aeabi_d2f>
 8001090:	4603      	mov	r3, r0
 8001092:	607b      	str	r3, [r7, #4]
              /************ chnaged here *********/
              Set_LED(j, 255 * factor1 + 0 * factor2, 0 * factor1 + 255 * factor2, 0 * factor1 + 0 * factor2);
 8001094:	89fc      	ldrh	r4, [r7, #14]
 8001096:	4980      	ldr	r1, [pc, #512]	; (8001298 <rainbow_effect_left+0x338>)
 8001098:	68b8      	ldr	r0, [r7, #8]
 800109a:	f7ff f859 	bl	8000150 <__aeabi_fmul>
 800109e:	4603      	mov	r3, r0
 80010a0:	461d      	mov	r5, r3
 80010a2:	f04f 0100 	mov.w	r1, #0
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff f852 	bl	8000150 <__aeabi_fmul>
 80010ac:	4603      	mov	r3, r0
 80010ae:	4619      	mov	r1, r3
 80010b0:	4628      	mov	r0, r5
 80010b2:	f7ff fd6d 	bl	8000b90 <__addsf3>
 80010b6:	4603      	mov	r3, r0
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fe71 	bl	8000da0 <__aeabi_f2iz>
 80010be:	4605      	mov	r5, r0
 80010c0:	f04f 0100 	mov.w	r1, #0
 80010c4:	68b8      	ldr	r0, [r7, #8]
 80010c6:	f7ff f843 	bl	8000150 <__aeabi_fmul>
 80010ca:	4603      	mov	r3, r0
 80010cc:	461e      	mov	r6, r3
 80010ce:	4972      	ldr	r1, [pc, #456]	; (8001298 <rainbow_effect_left+0x338>)
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff f83d 	bl	8000150 <__aeabi_fmul>
 80010d6:	4603      	mov	r3, r0
 80010d8:	4619      	mov	r1, r3
 80010da:	4630      	mov	r0, r6
 80010dc:	f7ff fd58 	bl	8000b90 <__addsf3>
 80010e0:	4603      	mov	r3, r0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff fe5c 	bl	8000da0 <__aeabi_f2iz>
 80010e8:	4606      	mov	r6, r0
 80010ea:	f04f 0100 	mov.w	r1, #0
 80010ee:	68b8      	ldr	r0, [r7, #8]
 80010f0:	f7ff f82e 	bl	8000150 <__aeabi_fmul>
 80010f4:	4603      	mov	r3, r0
 80010f6:	4698      	mov	r8, r3
 80010f8:	f04f 0100 	mov.w	r1, #0
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f7ff f827 	bl	8000150 <__aeabi_fmul>
 8001102:	4603      	mov	r3, r0
 8001104:	4619      	mov	r1, r3
 8001106:	4640      	mov	r0, r8
 8001108:	f7ff fd42 	bl	8000b90 <__addsf3>
 800110c:	4603      	mov	r3, r0
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fe46 	bl	8000da0 <__aeabi_f2iz>
 8001114:	4603      	mov	r3, r0
 8001116:	4632      	mov	r2, r6
 8001118:	4629      	mov	r1, r5
 800111a:	4620      	mov	r0, r4
 800111c:	f7ff fe7a 	bl	8000e14 <Set_LED>
              WS2812_Send();
 8001120:	f7ff feae 	bl	8000e80 <WS2812_Send>
              break;
 8001124:	e165      	b.n	80013f2 <rainbow_effect_left+0x492>
      case 1: factor1 = 1.0 - ((float)(ind % 13 - 1 * 4.333333333333333) / 4.333333333333333);
 8001126:	89b9      	ldrh	r1, [r7, #12]
 8001128:	4b59      	ldr	r3, [pc, #356]	; (8001290 <rainbow_effect_left+0x330>)
 800112a:	fba3 2301 	umull	r2, r3, r3, r1
 800112e:	089a      	lsrs	r2, r3, #2
 8001130:	4613      	mov	r3, r2
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	4413      	add	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	4413      	add	r3, r2
 800113a:	1acb      	subs	r3, r1, r3
 800113c:	b29b      	uxth	r3, r3
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff fa0c 	bl	800055c <__aeabi_i2d>
 8001144:	a34e      	add	r3, pc, #312	; (adr r3, 8001280 <rainbow_effect_left+0x320>)
 8001146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114a:	f7ff f8b9 	bl	80002c0 <__aeabi_dsub>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	4610      	mov	r0, r2
 8001154:	4619      	mov	r1, r3
 8001156:	f7ff fcc5 	bl	8000ae4 <__aeabi_d2f>
 800115a:	4603      	mov	r3, r0
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff fa0f 	bl	8000580 <__aeabi_f2d>
 8001162:	a347      	add	r3, pc, #284	; (adr r3, 8001280 <rainbow_effect_left+0x320>)
 8001164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001168:	f7ff fb8c 	bl	8000884 <__aeabi_ddiv>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	f04f 0000 	mov.w	r0, #0
 8001174:	4947      	ldr	r1, [pc, #284]	; (8001294 <rainbow_effect_left+0x334>)
 8001176:	f7ff f8a3 	bl	80002c0 <__aeabi_dsub>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	4610      	mov	r0, r2
 8001180:	4619      	mov	r1, r3
 8001182:	f7ff fcaf 	bl	8000ae4 <__aeabi_d2f>
 8001186:	4603      	mov	r3, r0
 8001188:	60bb      	str	r3, [r7, #8]
              factor2 = (float)((int)(ind - 4.333333333333333) % 13) / 4.333333333333333;
 800118a:	89bb      	ldrh	r3, [r7, #12]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff f9e5 	bl	800055c <__aeabi_i2d>
 8001192:	a33b      	add	r3, pc, #236	; (adr r3, 8001280 <rainbow_effect_left+0x320>)
 8001194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001198:	f7ff f892 	bl	80002c0 <__aeabi_dsub>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	4610      	mov	r0, r2
 80011a2:	4619      	mov	r1, r3
 80011a4:	f7ff fc56 	bl	8000a54 <__aeabi_d2iz>
 80011a8:	4601      	mov	r1, r0
 80011aa:	4b39      	ldr	r3, [pc, #228]	; (8001290 <rainbow_effect_left+0x330>)
 80011ac:	fb83 2301 	smull	r2, r3, r3, r1
 80011b0:	109a      	asrs	r2, r3, #2
 80011b2:	17cb      	asrs	r3, r1, #31
 80011b4:	1ad2      	subs	r2, r2, r3
 80011b6:	4613      	mov	r3, r2
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	4413      	add	r3, r2
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	4413      	add	r3, r2
 80011c0:	1aca      	subs	r2, r1, r3
 80011c2:	4610      	mov	r0, r2
 80011c4:	f7ff fd98 	bl	8000cf8 <__aeabi_i2f>
 80011c8:	4603      	mov	r3, r0
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff f9d8 	bl	8000580 <__aeabi_f2d>
 80011d0:	a32b      	add	r3, pc, #172	; (adr r3, 8001280 <rainbow_effect_left+0x320>)
 80011d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d6:	f7ff fb55 	bl	8000884 <__aeabi_ddiv>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	4610      	mov	r0, r2
 80011e0:	4619      	mov	r1, r3
 80011e2:	f7ff fc7f 	bl	8000ae4 <__aeabi_d2f>
 80011e6:	4603      	mov	r3, r0
 80011e8:	607b      	str	r3, [r7, #4]
              Set_LED(j, 0 * factor1 + 0 * factor2, 255 * factor1 + 0 * factor2, 0 * factor1 + 255 * factor2);
 80011ea:	89fc      	ldrh	r4, [r7, #14]
 80011ec:	f04f 0100 	mov.w	r1, #0
 80011f0:	68b8      	ldr	r0, [r7, #8]
 80011f2:	f7fe ffad 	bl	8000150 <__aeabi_fmul>
 80011f6:	4603      	mov	r3, r0
 80011f8:	461d      	mov	r5, r3
 80011fa:	f04f 0100 	mov.w	r1, #0
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7fe ffa6 	bl	8000150 <__aeabi_fmul>
 8001204:	4603      	mov	r3, r0
 8001206:	4619      	mov	r1, r3
 8001208:	4628      	mov	r0, r5
 800120a:	f7ff fcc1 	bl	8000b90 <__addsf3>
 800120e:	4603      	mov	r3, r0
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff fdc5 	bl	8000da0 <__aeabi_f2iz>
 8001216:	4605      	mov	r5, r0
 8001218:	491f      	ldr	r1, [pc, #124]	; (8001298 <rainbow_effect_left+0x338>)
 800121a:	68b8      	ldr	r0, [r7, #8]
 800121c:	f7fe ff98 	bl	8000150 <__aeabi_fmul>
 8001220:	4603      	mov	r3, r0
 8001222:	461e      	mov	r6, r3
 8001224:	f04f 0100 	mov.w	r1, #0
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7fe ff91 	bl	8000150 <__aeabi_fmul>
 800122e:	4603      	mov	r3, r0
 8001230:	4619      	mov	r1, r3
 8001232:	4630      	mov	r0, r6
 8001234:	f7ff fcac 	bl	8000b90 <__addsf3>
 8001238:	4603      	mov	r3, r0
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff fdb0 	bl	8000da0 <__aeabi_f2iz>
 8001240:	4606      	mov	r6, r0
 8001242:	f04f 0100 	mov.w	r1, #0
 8001246:	68b8      	ldr	r0, [r7, #8]
 8001248:	f7fe ff82 	bl	8000150 <__aeabi_fmul>
 800124c:	4603      	mov	r3, r0
 800124e:	4698      	mov	r8, r3
 8001250:	4911      	ldr	r1, [pc, #68]	; (8001298 <rainbow_effect_left+0x338>)
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7fe ff7c 	bl	8000150 <__aeabi_fmul>
 8001258:	4603      	mov	r3, r0
 800125a:	4619      	mov	r1, r3
 800125c:	4640      	mov	r0, r8
 800125e:	f7ff fc97 	bl	8000b90 <__addsf3>
 8001262:	4603      	mov	r3, r0
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff fd9b 	bl	8000da0 <__aeabi_f2iz>
 800126a:	4603      	mov	r3, r0
 800126c:	4632      	mov	r2, r6
 800126e:	4629      	mov	r1, r5
 8001270:	4620      	mov	r0, r4
 8001272:	f7ff fdcf 	bl	8000e14 <Set_LED>
              WS2812_Send();
 8001276:	f7ff fe03 	bl	8000e80 <WS2812_Send>
              break;
 800127a:	e0ba      	b.n	80013f2 <rainbow_effect_left+0x492>
 800127c:	f3af 8000 	nop.w
 8001280:	55555555 	.word	0x55555555
 8001284:	40115555 	.word	0x40115555
 8001288:	200002bc 	.word	0x200002bc
 800128c:	3ffa0000 	.word	0x3ffa0000
 8001290:	4ec4ec4f 	.word	0x4ec4ec4f
 8001294:	3ff00000 	.word	0x3ff00000
 8001298:	437f0000 	.word	0x437f0000
      case 2: factor1 = 1.0 - ((float)(ind % 13 - 2 * 4.333333333333333) / 4.333333333333333);
 800129c:	89b9      	ldrh	r1, [r7, #12]
 800129e:	4b68      	ldr	r3, [pc, #416]	; (8001440 <rainbow_effect_left+0x4e0>)
 80012a0:	fba3 2301 	umull	r2, r3, r3, r1
 80012a4:	089a      	lsrs	r2, r3, #2
 80012a6:	4613      	mov	r3, r2
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	4413      	add	r3, r2
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	4413      	add	r3, r2
 80012b0:	1acb      	subs	r3, r1, r3
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff f951 	bl	800055c <__aeabi_i2d>
 80012ba:	a35d      	add	r3, pc, #372	; (adr r3, 8001430 <rainbow_effect_left+0x4d0>)
 80012bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c0:	f7fe fffe 	bl	80002c0 <__aeabi_dsub>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4610      	mov	r0, r2
 80012ca:	4619      	mov	r1, r3
 80012cc:	f7ff fc0a 	bl	8000ae4 <__aeabi_d2f>
 80012d0:	4603      	mov	r3, r0
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff f954 	bl	8000580 <__aeabi_f2d>
 80012d8:	a357      	add	r3, pc, #348	; (adr r3, 8001438 <rainbow_effect_left+0x4d8>)
 80012da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012de:	f7ff fad1 	bl	8000884 <__aeabi_ddiv>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	f04f 0000 	mov.w	r0, #0
 80012ea:	4956      	ldr	r1, [pc, #344]	; (8001444 <rainbow_effect_left+0x4e4>)
 80012ec:	f7fe ffe8 	bl	80002c0 <__aeabi_dsub>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4610      	mov	r0, r2
 80012f6:	4619      	mov	r1, r3
 80012f8:	f7ff fbf4 	bl	8000ae4 <__aeabi_d2f>
 80012fc:	4603      	mov	r3, r0
 80012fe:	60bb      	str	r3, [r7, #8]
              factor2 = (float)((int)(ind - 8.666666666666666) % 13) / 4.333333333333333;
 8001300:	89bb      	ldrh	r3, [r7, #12]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff f92a 	bl	800055c <__aeabi_i2d>
 8001308:	a349      	add	r3, pc, #292	; (adr r3, 8001430 <rainbow_effect_left+0x4d0>)
 800130a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130e:	f7fe ffd7 	bl	80002c0 <__aeabi_dsub>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4610      	mov	r0, r2
 8001318:	4619      	mov	r1, r3
 800131a:	f7ff fb9b 	bl	8000a54 <__aeabi_d2iz>
 800131e:	4601      	mov	r1, r0
 8001320:	4b47      	ldr	r3, [pc, #284]	; (8001440 <rainbow_effect_left+0x4e0>)
 8001322:	fb83 2301 	smull	r2, r3, r3, r1
 8001326:	109a      	asrs	r2, r3, #2
 8001328:	17cb      	asrs	r3, r1, #31
 800132a:	1ad2      	subs	r2, r2, r3
 800132c:	4613      	mov	r3, r2
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	4413      	add	r3, r2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	4413      	add	r3, r2
 8001336:	1aca      	subs	r2, r1, r3
 8001338:	4610      	mov	r0, r2
 800133a:	f7ff fcdd 	bl	8000cf8 <__aeabi_i2f>
 800133e:	4603      	mov	r3, r0
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff f91d 	bl	8000580 <__aeabi_f2d>
 8001346:	a33c      	add	r3, pc, #240	; (adr r3, 8001438 <rainbow_effect_left+0x4d8>)
 8001348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134c:	f7ff fa9a 	bl	8000884 <__aeabi_ddiv>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	4610      	mov	r0, r2
 8001356:	4619      	mov	r1, r3
 8001358:	f7ff fbc4 	bl	8000ae4 <__aeabi_d2f>
 800135c:	4603      	mov	r3, r0
 800135e:	607b      	str	r3, [r7, #4]
              Set_LED(j, 0 * factor1 + 255 * factor2, 0 * factor1 + 0 * factor2, 255 * factor1 + 0 * factor2);
 8001360:	89fc      	ldrh	r4, [r7, #14]
 8001362:	f04f 0100 	mov.w	r1, #0
 8001366:	68b8      	ldr	r0, [r7, #8]
 8001368:	f7fe fef2 	bl	8000150 <__aeabi_fmul>
 800136c:	4603      	mov	r3, r0
 800136e:	461d      	mov	r5, r3
 8001370:	4935      	ldr	r1, [pc, #212]	; (8001448 <rainbow_effect_left+0x4e8>)
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7fe feec 	bl	8000150 <__aeabi_fmul>
 8001378:	4603      	mov	r3, r0
 800137a:	4619      	mov	r1, r3
 800137c:	4628      	mov	r0, r5
 800137e:	f7ff fc07 	bl	8000b90 <__addsf3>
 8001382:	4603      	mov	r3, r0
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff fd0b 	bl	8000da0 <__aeabi_f2iz>
 800138a:	4605      	mov	r5, r0
 800138c:	f04f 0100 	mov.w	r1, #0
 8001390:	68b8      	ldr	r0, [r7, #8]
 8001392:	f7fe fedd 	bl	8000150 <__aeabi_fmul>
 8001396:	4603      	mov	r3, r0
 8001398:	461e      	mov	r6, r3
 800139a:	f04f 0100 	mov.w	r1, #0
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7fe fed6 	bl	8000150 <__aeabi_fmul>
 80013a4:	4603      	mov	r3, r0
 80013a6:	4619      	mov	r1, r3
 80013a8:	4630      	mov	r0, r6
 80013aa:	f7ff fbf1 	bl	8000b90 <__addsf3>
 80013ae:	4603      	mov	r3, r0
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff fcf5 	bl	8000da0 <__aeabi_f2iz>
 80013b6:	4606      	mov	r6, r0
 80013b8:	4923      	ldr	r1, [pc, #140]	; (8001448 <rainbow_effect_left+0x4e8>)
 80013ba:	68b8      	ldr	r0, [r7, #8]
 80013bc:	f7fe fec8 	bl	8000150 <__aeabi_fmul>
 80013c0:	4603      	mov	r3, r0
 80013c2:	4698      	mov	r8, r3
 80013c4:	f04f 0100 	mov.w	r1, #0
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7fe fec1 	bl	8000150 <__aeabi_fmul>
 80013ce:	4603      	mov	r3, r0
 80013d0:	4619      	mov	r1, r3
 80013d2:	4640      	mov	r0, r8
 80013d4:	f7ff fbdc 	bl	8000b90 <__addsf3>
 80013d8:	4603      	mov	r3, r0
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff fce0 	bl	8000da0 <__aeabi_f2iz>
 80013e0:	4603      	mov	r3, r0
 80013e2:	4632      	mov	r2, r6
 80013e4:	4629      	mov	r1, r5
 80013e6:	4620      	mov	r0, r4
 80013e8:	f7ff fd14 	bl	8000e14 <Set_LED>
              WS2812_Send();
 80013ec:	f7ff fd48 	bl	8000e80 <WS2812_Send>
              break;
 80013f0:	bf00      	nop
  for(uint16_t j=0;j<8;j++) {
 80013f2:	89fb      	ldrh	r3, [r7, #14]
 80013f4:	3301      	adds	r3, #1
 80013f6:	81fb      	strh	r3, [r7, #14]
 80013f8:	89fb      	ldrh	r3, [r7, #14]
 80013fa:	2b07      	cmp	r3, #7
 80013fc:	f67f adb7 	bls.w	8000f6e <rainbow_effect_left+0xe>
    }
  }
  if(effStep >= 13) {effStep=0; return 0x03; }
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <rainbow_effect_left+0x4ec>)
 8001402:	881b      	ldrh	r3, [r3, #0]
 8001404:	2b0c      	cmp	r3, #12
 8001406:	d904      	bls.n	8001412 <rainbow_effect_left+0x4b2>
 8001408:	4b10      	ldr	r3, [pc, #64]	; (800144c <rainbow_effect_left+0x4ec>)
 800140a:	2200      	movs	r2, #0
 800140c:	801a      	strh	r2, [r3, #0]
 800140e:	2303      	movs	r3, #3
 8001410:	e006      	b.n	8001420 <rainbow_effect_left+0x4c0>
  else effStep++;
 8001412:	4b0e      	ldr	r3, [pc, #56]	; (800144c <rainbow_effect_left+0x4ec>)
 8001414:	881b      	ldrh	r3, [r3, #0]
 8001416:	3301      	adds	r3, #1
 8001418:	b29a      	uxth	r2, r3
 800141a:	4b0c      	ldr	r3, [pc, #48]	; (800144c <rainbow_effect_left+0x4ec>)
 800141c:	801a      	strh	r2, [r3, #0]
  return 0x01;
 800141e:	2301      	movs	r3, #1
}
 8001420:	4618      	mov	r0, r3
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800142a:	bf00      	nop
 800142c:	f3af 8000 	nop.w
 8001430:	55555555 	.word	0x55555555
 8001434:	40215555 	.word	0x40215555
 8001438:	55555555 	.word	0x55555555
 800143c:	40115555 	.word	0x40115555
 8001440:	4ec4ec4f 	.word	0x4ec4ec4f
 8001444:	3ff00000 	.word	0x3ff00000
 8001448:	437f0000 	.word	0x437f0000
 800144c:	200002bc 	.word	0x200002bc

08001450 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001454:	f000 fa6c 	bl	8001930 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001458:	f000 f841 	bl	80014de <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800145c:	f000 f942 	bl	80016e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001460:	f000 f922 	bl	80016a8 <MX_DMA_Init>
  MX_TIM1_Init();
 8001464:	f000 f880 	bl	8001568 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  Set_LED(0, 255, 0, 0);
 8001468:	2300      	movs	r3, #0
 800146a:	2200      	movs	r2, #0
 800146c:	21ff      	movs	r1, #255	; 0xff
 800146e:	2000      	movs	r0, #0
 8001470:	f7ff fcd0 	bl	8000e14 <Set_LED>
    Set_LED(1, 0, 255, 0);
 8001474:	2300      	movs	r3, #0
 8001476:	22ff      	movs	r2, #255	; 0xff
 8001478:	2100      	movs	r1, #0
 800147a:	2001      	movs	r0, #1
 800147c:	f7ff fcca 	bl	8000e14 <Set_LED>
    Set_LED(2, 0, 0, 255);
 8001480:	23ff      	movs	r3, #255	; 0xff
 8001482:	2200      	movs	r2, #0
 8001484:	2100      	movs	r1, #0
 8001486:	2002      	movs	r0, #2
 8001488:	f7ff fcc4 	bl	8000e14 <Set_LED>

    Set_LED(3, 46, 89, 128);
 800148c:	2380      	movs	r3, #128	; 0x80
 800148e:	2259      	movs	r2, #89	; 0x59
 8001490:	212e      	movs	r1, #46	; 0x2e
 8001492:	2003      	movs	r0, #3
 8001494:	f7ff fcbe 	bl	8000e14 <Set_LED>

    Set_LED(4, 156, 233, 100);
 8001498:	2364      	movs	r3, #100	; 0x64
 800149a:	22e9      	movs	r2, #233	; 0xe9
 800149c:	219c      	movs	r1, #156	; 0x9c
 800149e:	2004      	movs	r0, #4
 80014a0:	f7ff fcb8 	bl	8000e14 <Set_LED>
    Set_LED(5, 102, 0, 235);
 80014a4:	23eb      	movs	r3, #235	; 0xeb
 80014a6:	2200      	movs	r2, #0
 80014a8:	2166      	movs	r1, #102	; 0x66
 80014aa:	2005      	movs	r0, #5
 80014ac:	f7ff fcb2 	bl	8000e14 <Set_LED>
    Set_LED(6, 47, 38, 77);
 80014b0:	234d      	movs	r3, #77	; 0x4d
 80014b2:	2226      	movs	r2, #38	; 0x26
 80014b4:	212f      	movs	r1, #47	; 0x2f
 80014b6:	2006      	movs	r0, #6
 80014b8:	f7ff fcac 	bl	8000e14 <Set_LED>

    Set_LED(7, 255, 200, 0);
 80014bc:	2300      	movs	r3, #0
 80014be:	22c8      	movs	r2, #200	; 0xc8
 80014c0:	21ff      	movs	r1, #255	; 0xff
 80014c2:	2007      	movs	r0, #7
 80014c4:	f7ff fca6 	bl	8000e14 <Set_LED>

    Set_Brightness(45);
 80014c8:	202d      	movs	r0, #45	; 0x2d
 80014ca:	f7ff fccf 	bl	8000e6c <Set_Brightness>
    WS2812_Send();
 80014ce:	f7ff fcd7 	bl	8000e80 <WS2812_Send>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  rainbow_effect_left();
 80014d2:	f7ff fd45 	bl	8000f60 <rainbow_effect_left>
	  HAL_Delay(30);
 80014d6:	201e      	movs	r0, #30
 80014d8:	f000 fa8c 	bl	80019f4 <HAL_Delay>
	  rainbow_effect_left();
 80014dc:	e7f9      	b.n	80014d2 <main+0x82>

080014de <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b090      	sub	sp, #64	; 0x40
 80014e2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014e4:	f107 0318 	add.w	r3, r7, #24
 80014e8:	2228      	movs	r2, #40	; 0x28
 80014ea:	2100      	movs	r1, #0
 80014ec:	4618      	mov	r0, r3
 80014ee:	f002 fc43 	bl	8003d78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001500:	2301      	movs	r3, #1
 8001502:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001504:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001508:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800150a:	2300      	movs	r3, #0
 800150c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800150e:	2301      	movs	r3, #1
 8001510:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001512:	2302      	movs	r3, #2
 8001514:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001516:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800151a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800151c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001520:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001522:	f107 0318 	add.w	r3, r7, #24
 8001526:	4618      	mov	r0, r3
 8001528:	f000 ff76 	bl	8002418 <HAL_RCC_OscConfig>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001532:	f000 f8f9 	bl	8001728 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001536:	230f      	movs	r3, #15
 8001538:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800153a:	2302      	movs	r3, #2
 800153c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001542:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001546:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	2102      	movs	r1, #2
 8001550:	4618      	mov	r0, r3
 8001552:	f001 f9e3 	bl	800291c <HAL_RCC_ClockConfig>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800155c:	f000 f8e4 	bl	8001728 <Error_Handler>
  }
}
 8001560:	bf00      	nop
 8001562:	3740      	adds	r7, #64	; 0x40
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b096      	sub	sp, #88	; 0x58
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800156e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800157c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	609a      	str	r2, [r3, #8]
 8001592:	60da      	str	r2, [r3, #12]
 8001594:	611a      	str	r2, [r3, #16]
 8001596:	615a      	str	r2, [r3, #20]
 8001598:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800159a:	1d3b      	adds	r3, r7, #4
 800159c:	2220      	movs	r2, #32
 800159e:	2100      	movs	r1, #0
 80015a0:	4618      	mov	r0, r3
 80015a2:	f002 fbe9 	bl	8003d78 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015a6:	4b3e      	ldr	r3, [pc, #248]	; (80016a0 <MX_TIM1_Init+0x138>)
 80015a8:	4a3e      	ldr	r2, [pc, #248]	; (80016a4 <MX_TIM1_Init+0x13c>)
 80015aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80015ac:	4b3c      	ldr	r3, [pc, #240]	; (80016a0 <MX_TIM1_Init+0x138>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b2:	4b3b      	ldr	r3, [pc, #236]	; (80016a0 <MX_TIM1_Init+0x138>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 80015b8:	4b39      	ldr	r3, [pc, #228]	; (80016a0 <MX_TIM1_Init+0x138>)
 80015ba:	2259      	movs	r2, #89	; 0x59
 80015bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015be:	4b38      	ldr	r3, [pc, #224]	; (80016a0 <MX_TIM1_Init+0x138>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015c4:	4b36      	ldr	r3, [pc, #216]	; (80016a0 <MX_TIM1_Init+0x138>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ca:	4b35      	ldr	r3, [pc, #212]	; (80016a0 <MX_TIM1_Init+0x138>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015d0:	4833      	ldr	r0, [pc, #204]	; (80016a0 <MX_TIM1_Init+0x138>)
 80015d2:	f001 fb09 	bl	8002be8 <HAL_TIM_Base_Init>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80015dc:	f000 f8a4 	bl	8001728 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80015ea:	4619      	mov	r1, r3
 80015ec:	482c      	ldr	r0, [pc, #176]	; (80016a0 <MX_TIM1_Init+0x138>)
 80015ee:	f001 feb3 	bl	8003358 <HAL_TIM_ConfigClockSource>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80015f8:	f000 f896 	bl	8001728 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015fc:	4828      	ldr	r0, [pc, #160]	; (80016a0 <MX_TIM1_Init+0x138>)
 80015fe:	f001 fb42 	bl	8002c86 <HAL_TIM_PWM_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001608:	f000 f88e 	bl	8001728 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800160c:	2300      	movs	r3, #0
 800160e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001610:	2300      	movs	r3, #0
 8001612:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001614:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001618:	4619      	mov	r1, r3
 800161a:	4821      	ldr	r0, [pc, #132]	; (80016a0 <MX_TIM1_Init+0x138>)
 800161c:	f002 fade 	bl	8003bdc <HAL_TIMEx_MasterConfigSynchronization>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001626:	f000 f87f 	bl	8001728 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800162a:	2360      	movs	r3, #96	; 0x60
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800162e:	2300      	movs	r3, #0
 8001630:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001632:	2300      	movs	r3, #0
 8001634:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001636:	2300      	movs	r3, #0
 8001638:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800163a:	2300      	movs	r3, #0
 800163c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800163e:	2300      	movs	r3, #0
 8001640:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001642:	2300      	movs	r3, #0
 8001644:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800164a:	2200      	movs	r2, #0
 800164c:	4619      	mov	r1, r3
 800164e:	4814      	ldr	r0, [pc, #80]	; (80016a0 <MX_TIM1_Init+0x138>)
 8001650:	f001 fdc4 	bl	80031dc <HAL_TIM_PWM_ConfigChannel>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800165a:	f000 f865 	bl	8001728 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800165e:	2300      	movs	r3, #0
 8001660:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001662:	2300      	movs	r3, #0
 8001664:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001672:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001676:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001678:	2300      	movs	r3, #0
 800167a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800167c:	1d3b      	adds	r3, r7, #4
 800167e:	4619      	mov	r1, r3
 8001680:	4807      	ldr	r0, [pc, #28]	; (80016a0 <MX_TIM1_Init+0x138>)
 8001682:	f002 fb03 	bl	8003c8c <HAL_TIMEx_ConfigBreakDeadTime>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800168c:	f000 f84c 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001690:	4803      	ldr	r0, [pc, #12]	; (80016a0 <MX_TIM1_Init+0x138>)
 8001692:	f000 f8bb 	bl	800180c <HAL_TIM_MspPostInit>

}
 8001696:	bf00      	nop
 8001698:	3758      	adds	r7, #88	; 0x58
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000028 	.word	0x20000028
 80016a4:	40012c00 	.word	0x40012c00

080016a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016ae:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <MX_DMA_Init+0x38>)
 80016b0:	695b      	ldr	r3, [r3, #20]
 80016b2:	4a0b      	ldr	r2, [pc, #44]	; (80016e0 <MX_DMA_Init+0x38>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6153      	str	r3, [r2, #20]
 80016ba:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <MX_DMA_Init+0x38>)
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2100      	movs	r1, #0
 80016ca:	200c      	movs	r0, #12
 80016cc:	f000 fa8d 	bl	8001bea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80016d0:	200c      	movs	r0, #12
 80016d2:	f000 faa6 	bl	8001c22 <HAL_NVIC_EnableIRQ>

}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40021000 	.word	0x40021000

080016e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ea:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <MX_GPIO_Init+0x40>)
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	4a0d      	ldr	r2, [pc, #52]	; (8001724 <MX_GPIO_Init+0x40>)
 80016f0:	f043 0320 	orr.w	r3, r3, #32
 80016f4:	6193      	str	r3, [r2, #24]
 80016f6:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <MX_GPIO_Init+0x40>)
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	f003 0320 	and.w	r3, r3, #32
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001702:	4b08      	ldr	r3, [pc, #32]	; (8001724 <MX_GPIO_Init+0x40>)
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	4a07      	ldr	r2, [pc, #28]	; (8001724 <MX_GPIO_Init+0x40>)
 8001708:	f043 0304 	orr.w	r3, r3, #4
 800170c:	6193      	str	r3, [r2, #24]
 800170e:	4b05      	ldr	r3, [pc, #20]	; (8001724 <MX_GPIO_Init+0x40>)
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	f003 0304 	and.w	r3, r3, #4
 8001716:	603b      	str	r3, [r7, #0]
 8001718:	683b      	ldr	r3, [r7, #0]

}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	bc80      	pop	{r7}
 8001722:	4770      	bx	lr
 8001724:	40021000 	.word	0x40021000

08001728 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800172c:	b672      	cpsid	i
}
 800172e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001730:	e7fe      	b.n	8001730 <Error_Handler+0x8>
	...

08001734 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800173a:	4b0e      	ldr	r3, [pc, #56]	; (8001774 <HAL_MspInit+0x40>)
 800173c:	699b      	ldr	r3, [r3, #24]
 800173e:	4a0d      	ldr	r2, [pc, #52]	; (8001774 <HAL_MspInit+0x40>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	6193      	str	r3, [r2, #24]
 8001746:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <HAL_MspInit+0x40>)
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001752:	4b08      	ldr	r3, [pc, #32]	; (8001774 <HAL_MspInit+0x40>)
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	4a07      	ldr	r2, [pc, #28]	; (8001774 <HAL_MspInit+0x40>)
 8001758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800175c:	61d3      	str	r3, [r2, #28]
 800175e:	4b05      	ldr	r3, [pc, #20]	; (8001774 <HAL_MspInit+0x40>)
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr
 8001774:	40021000 	.word	0x40021000

08001778 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a1d      	ldr	r2, [pc, #116]	; (80017fc <HAL_TIM_Base_MspInit+0x84>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d133      	bne.n	80017f2 <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800178a:	4b1d      	ldr	r3, [pc, #116]	; (8001800 <HAL_TIM_Base_MspInit+0x88>)
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	4a1c      	ldr	r2, [pc, #112]	; (8001800 <HAL_TIM_Base_MspInit+0x88>)
 8001790:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001794:	6193      	str	r3, [r2, #24]
 8001796:	4b1a      	ldr	r3, [pc, #104]	; (8001800 <HAL_TIM_Base_MspInit+0x88>)
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80017a2:	4b18      	ldr	r3, [pc, #96]	; (8001804 <HAL_TIM_Base_MspInit+0x8c>)
 80017a4:	4a18      	ldr	r2, [pc, #96]	; (8001808 <HAL_TIM_Base_MspInit+0x90>)
 80017a6:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017a8:	4b16      	ldr	r3, [pc, #88]	; (8001804 <HAL_TIM_Base_MspInit+0x8c>)
 80017aa:	2210      	movs	r2, #16
 80017ac:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017ae:	4b15      	ldr	r3, [pc, #84]	; (8001804 <HAL_TIM_Base_MspInit+0x8c>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80017b4:	4b13      	ldr	r3, [pc, #76]	; (8001804 <HAL_TIM_Base_MspInit+0x8c>)
 80017b6:	2280      	movs	r2, #128	; 0x80
 80017b8:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017ba:	4b12      	ldr	r3, [pc, #72]	; (8001804 <HAL_TIM_Base_MspInit+0x8c>)
 80017bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017c0:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017c2:	4b10      	ldr	r3, [pc, #64]	; (8001804 <HAL_TIM_Base_MspInit+0x8c>)
 80017c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017c8:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80017ca:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <HAL_TIM_Base_MspInit+0x8c>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80017d0:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <HAL_TIM_Base_MspInit+0x8c>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80017d6:	480b      	ldr	r0, [pc, #44]	; (8001804 <HAL_TIM_Base_MspInit+0x8c>)
 80017d8:	f000 fa3e 	bl	8001c58 <HAL_DMA_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 80017e2:	f7ff ffa1 	bl	8001728 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a06      	ldr	r2, [pc, #24]	; (8001804 <HAL_TIM_Base_MspInit+0x8c>)
 80017ea:	625a      	str	r2, [r3, #36]	; 0x24
 80017ec:	4a05      	ldr	r2, [pc, #20]	; (8001804 <HAL_TIM_Base_MspInit+0x8c>)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80017f2:	bf00      	nop
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40012c00 	.word	0x40012c00
 8001800:	40021000 	.word	0x40021000
 8001804:	20000070 	.word	0x20000070
 8001808:	4002001c 	.word	0x4002001c

0800180c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b088      	sub	sp, #32
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001814:	f107 0310 	add.w	r3, r7, #16
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a10      	ldr	r2, [pc, #64]	; (8001868 <HAL_TIM_MspPostInit+0x5c>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d118      	bne.n	800185e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800182c:	4b0f      	ldr	r3, [pc, #60]	; (800186c <HAL_TIM_MspPostInit+0x60>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	4a0e      	ldr	r2, [pc, #56]	; (800186c <HAL_TIM_MspPostInit+0x60>)
 8001832:	f043 0304 	orr.w	r3, r3, #4
 8001836:	6193      	str	r3, [r2, #24]
 8001838:	4b0c      	ldr	r3, [pc, #48]	; (800186c <HAL_TIM_MspPostInit+0x60>)
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001844:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001848:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184a:	2302      	movs	r3, #2
 800184c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184e:	2302      	movs	r3, #2
 8001850:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001852:	f107 0310 	add.w	r3, r7, #16
 8001856:	4619      	mov	r1, r3
 8001858:	4805      	ldr	r0, [pc, #20]	; (8001870 <HAL_TIM_MspPostInit+0x64>)
 800185a:	f000 fc61 	bl	8002120 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800185e:	bf00      	nop
 8001860:	3720      	adds	r7, #32
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40012c00 	.word	0x40012c00
 800186c:	40021000 	.word	0x40021000
 8001870:	40010800 	.word	0x40010800

08001874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001878:	e7fe      	b.n	8001878 <NMI_Handler+0x4>

0800187a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800187e:	e7fe      	b.n	800187e <HardFault_Handler+0x4>

08001880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001884:	e7fe      	b.n	8001884 <MemManage_Handler+0x4>

08001886 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800188a:	e7fe      	b.n	800188a <BusFault_Handler+0x4>

0800188c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001890:	e7fe      	b.n	8001890 <UsageFault_Handler+0x4>

08001892 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr

0800189e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr

080018aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr

080018b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ba:	f000 f87f 	bl	80019bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
	...

080018c4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80018c8:	4802      	ldr	r0, [pc, #8]	; (80018d4 <DMA1_Channel2_IRQHandler+0x10>)
 80018ca:	f000 faf5 	bl	8001eb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000070 	.word	0x20000070

080018d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr

080018e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018e4:	480c      	ldr	r0, [pc, #48]	; (8001918 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018e6:	490d      	ldr	r1, [pc, #52]	; (800191c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018e8:	4a0d      	ldr	r2, [pc, #52]	; (8001920 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018ec:	e002      	b.n	80018f4 <LoopCopyDataInit>

080018ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018f2:	3304      	adds	r3, #4

080018f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018f8:	d3f9      	bcc.n	80018ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018fa:	4a0a      	ldr	r2, [pc, #40]	; (8001924 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018fc:	4c0a      	ldr	r4, [pc, #40]	; (8001928 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001900:	e001      	b.n	8001906 <LoopFillZerobss>

08001902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001904:	3204      	adds	r2, #4

08001906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001908:	d3fb      	bcc.n	8001902 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800190a:	f7ff ffe5 	bl	80018d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800190e:	f002 fa0f 	bl	8003d30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001912:	f7ff fd9d 	bl	8001450 <main>
  bx lr
 8001916:	4770      	bx	lr
  ldr r0, =_sdata
 8001918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800191c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001920:	08003dc8 	.word	0x08003dc8
  ldr r2, =_sbss
 8001924:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001928:	200002c4 	.word	0x200002c4

0800192c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800192c:	e7fe      	b.n	800192c <ADC1_2_IRQHandler>
	...

08001930 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001934:	4b08      	ldr	r3, [pc, #32]	; (8001958 <HAL_Init+0x28>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a07      	ldr	r2, [pc, #28]	; (8001958 <HAL_Init+0x28>)
 800193a:	f043 0310 	orr.w	r3, r3, #16
 800193e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001940:	2003      	movs	r0, #3
 8001942:	f000 f947 	bl	8001bd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001946:	200f      	movs	r0, #15
 8001948:	f000 f808 	bl	800195c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800194c:	f7ff fef2 	bl	8001734 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40022000 	.word	0x40022000

0800195c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001964:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <HAL_InitTick+0x54>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <HAL_InitTick+0x58>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	4619      	mov	r1, r3
 800196e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001972:	fbb3 f3f1 	udiv	r3, r3, r1
 8001976:	fbb2 f3f3 	udiv	r3, r2, r3
 800197a:	4618      	mov	r0, r3
 800197c:	f000 f95f 	bl	8001c3e <HAL_SYSTICK_Config>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e00e      	b.n	80019a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2b0f      	cmp	r3, #15
 800198e:	d80a      	bhi.n	80019a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001990:	2200      	movs	r2, #0
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001998:	f000 f927 	bl	8001bea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800199c:	4a06      	ldr	r2, [pc, #24]	; (80019b8 <HAL_InitTick+0x5c>)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019a2:	2300      	movs	r3, #0
 80019a4:	e000      	b.n	80019a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000000 	.word	0x20000000
 80019b4:	20000008 	.word	0x20000008
 80019b8:	20000004 	.word	0x20000004

080019bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019c0:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <HAL_IncTick+0x1c>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	461a      	mov	r2, r3
 80019c6:	4b05      	ldr	r3, [pc, #20]	; (80019dc <HAL_IncTick+0x20>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4413      	add	r3, r2
 80019cc:	4a03      	ldr	r2, [pc, #12]	; (80019dc <HAL_IncTick+0x20>)
 80019ce:	6013      	str	r3, [r2, #0]
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr
 80019d8:	20000008 	.word	0x20000008
 80019dc:	200002c0 	.word	0x200002c0

080019e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return uwTick;
 80019e4:	4b02      	ldr	r3, [pc, #8]	; (80019f0 <HAL_GetTick+0x10>)
 80019e6:	681b      	ldr	r3, [r3, #0]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr
 80019f0:	200002c0 	.word	0x200002c0

080019f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019fc:	f7ff fff0 	bl	80019e0 <HAL_GetTick>
 8001a00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a0c:	d005      	beq.n	8001a1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a0e:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <HAL_Delay+0x44>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	461a      	mov	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	4413      	add	r3, r2
 8001a18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a1a:	bf00      	nop
 8001a1c:	f7ff ffe0 	bl	80019e0 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d8f7      	bhi.n	8001a1c <HAL_Delay+0x28>
  {
  }
}
 8001a2c:	bf00      	nop
 8001a2e:	bf00      	nop
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000008 	.word	0x20000008

08001a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <__NVIC_SetPriorityGrouping+0x44>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a52:	68ba      	ldr	r2, [r7, #8]
 8001a54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a58:	4013      	ands	r3, r2
 8001a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a6e:	4a04      	ldr	r2, [pc, #16]	; (8001a80 <__NVIC_SetPriorityGrouping+0x44>)
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	60d3      	str	r3, [r2, #12]
}
 8001a74:	bf00      	nop
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a88:	4b04      	ldr	r3, [pc, #16]	; (8001a9c <__NVIC_GetPriorityGrouping+0x18>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	0a1b      	lsrs	r3, r3, #8
 8001a8e:	f003 0307 	and.w	r3, r3, #7
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	db0b      	blt.n	8001aca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	f003 021f 	and.w	r2, r3, #31
 8001ab8:	4906      	ldr	r1, [pc, #24]	; (8001ad4 <__NVIC_EnableIRQ+0x34>)
 8001aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abe:	095b      	lsrs	r3, r3, #5
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr
 8001ad4:	e000e100 	.word	0xe000e100

08001ad8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	6039      	str	r1, [r7, #0]
 8001ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	db0a      	blt.n	8001b02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	b2da      	uxtb	r2, r3
 8001af0:	490c      	ldr	r1, [pc, #48]	; (8001b24 <__NVIC_SetPriority+0x4c>)
 8001af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af6:	0112      	lsls	r2, r2, #4
 8001af8:	b2d2      	uxtb	r2, r2
 8001afa:	440b      	add	r3, r1
 8001afc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b00:	e00a      	b.n	8001b18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	b2da      	uxtb	r2, r3
 8001b06:	4908      	ldr	r1, [pc, #32]	; (8001b28 <__NVIC_SetPriority+0x50>)
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	f003 030f 	and.w	r3, r3, #15
 8001b0e:	3b04      	subs	r3, #4
 8001b10:	0112      	lsls	r2, r2, #4
 8001b12:	b2d2      	uxtb	r2, r2
 8001b14:	440b      	add	r3, r1
 8001b16:	761a      	strb	r2, [r3, #24]
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bc80      	pop	{r7}
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	e000e100 	.word	0xe000e100
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b089      	sub	sp, #36	; 0x24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	f1c3 0307 	rsb	r3, r3, #7
 8001b46:	2b04      	cmp	r3, #4
 8001b48:	bf28      	it	cs
 8001b4a:	2304      	movcs	r3, #4
 8001b4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	3304      	adds	r3, #4
 8001b52:	2b06      	cmp	r3, #6
 8001b54:	d902      	bls.n	8001b5c <NVIC_EncodePriority+0x30>
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	3b03      	subs	r3, #3
 8001b5a:	e000      	b.n	8001b5e <NVIC_EncodePriority+0x32>
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43da      	mvns	r2, r3
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	401a      	ands	r2, r3
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7e:	43d9      	mvns	r1, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b84:	4313      	orrs	r3, r2
         );
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3724      	adds	r7, #36	; 0x24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr

08001b90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ba0:	d301      	bcc.n	8001ba6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e00f      	b.n	8001bc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ba6:	4a0a      	ldr	r2, [pc, #40]	; (8001bd0 <SysTick_Config+0x40>)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bae:	210f      	movs	r1, #15
 8001bb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bb4:	f7ff ff90 	bl	8001ad8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bb8:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <SysTick_Config+0x40>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bbe:	4b04      	ldr	r3, [pc, #16]	; (8001bd0 <SysTick_Config+0x40>)
 8001bc0:	2207      	movs	r2, #7
 8001bc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	e000e010 	.word	0xe000e010

08001bd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f7ff ff2d 	bl	8001a3c <__NVIC_SetPriorityGrouping>
}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b086      	sub	sp, #24
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	60b9      	str	r1, [r7, #8]
 8001bf4:	607a      	str	r2, [r7, #4]
 8001bf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bfc:	f7ff ff42 	bl	8001a84 <__NVIC_GetPriorityGrouping>
 8001c00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	68b9      	ldr	r1, [r7, #8]
 8001c06:	6978      	ldr	r0, [r7, #20]
 8001c08:	f7ff ff90 	bl	8001b2c <NVIC_EncodePriority>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c12:	4611      	mov	r1, r2
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff ff5f 	bl	8001ad8 <__NVIC_SetPriority>
}
 8001c1a:	bf00      	nop
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b082      	sub	sp, #8
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	4603      	mov	r3, r0
 8001c2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff ff35 	bl	8001aa0 <__NVIC_EnableIRQ>
}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b082      	sub	sp, #8
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7ff ffa2 	bl	8001b90 <SysTick_Config>
 8001c4c:	4603      	mov	r3, r0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
	...

08001c58 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e043      	b.n	8001cf6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	461a      	mov	r2, r3
 8001c74:	4b22      	ldr	r3, [pc, #136]	; (8001d00 <HAL_DMA_Init+0xa8>)
 8001c76:	4413      	add	r3, r2
 8001c78:	4a22      	ldr	r2, [pc, #136]	; (8001d04 <HAL_DMA_Init+0xac>)
 8001c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7e:	091b      	lsrs	r3, r3, #4
 8001c80:	009a      	lsls	r2, r3, #2
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a1f      	ldr	r2, [pc, #124]	; (8001d08 <HAL_DMA_Init+0xb0>)
 8001c8a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2202      	movs	r2, #2
 8001c90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001ca2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001ca6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001cb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cc8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	69db      	ldr	r3, [r3, #28]
 8001cce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3714      	adds	r7, #20
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr
 8001d00:	bffdfff8 	.word	0xbffdfff8
 8001d04:	cccccccd 	.word	0xcccccccd
 8001d08:	40020000 	.word	0x40020000

08001d0c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
 8001d18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d101      	bne.n	8001d2c <HAL_DMA_Start_IT+0x20>
 8001d28:	2302      	movs	r3, #2
 8001d2a:	e04a      	b.n	8001dc2 <HAL_DMA_Start_IT+0xb6>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d13a      	bne.n	8001db4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2202      	movs	r2, #2
 8001d42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 0201 	bic.w	r2, r2, #1
 8001d5a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	68b9      	ldr	r1, [r7, #8]
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f000 f9ae 	bl	80020c4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d008      	beq.n	8001d82 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f042 020e 	orr.w	r2, r2, #14
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	e00f      	b.n	8001da2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 0204 	bic.w	r2, r2, #4
 8001d90:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f042 020a 	orr.w	r2, r2, #10
 8001da0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f042 0201 	orr.w	r2, r2, #1
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	e005      	b.n	8001dc0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001dc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3718      	adds	r7, #24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
	...

08001dcc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d005      	beq.n	8001dee <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2204      	movs	r2, #4
 8001de6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	73fb      	strb	r3, [r7, #15]
 8001dec:	e051      	b.n	8001e92 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 020e 	bic.w	r2, r2, #14
 8001dfc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f022 0201 	bic.w	r2, r2, #1
 8001e0c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a22      	ldr	r2, [pc, #136]	; (8001e9c <HAL_DMA_Abort_IT+0xd0>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d029      	beq.n	8001e6c <HAL_DMA_Abort_IT+0xa0>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a20      	ldr	r2, [pc, #128]	; (8001ea0 <HAL_DMA_Abort_IT+0xd4>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d022      	beq.n	8001e68 <HAL_DMA_Abort_IT+0x9c>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a1f      	ldr	r2, [pc, #124]	; (8001ea4 <HAL_DMA_Abort_IT+0xd8>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d01a      	beq.n	8001e62 <HAL_DMA_Abort_IT+0x96>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a1d      	ldr	r2, [pc, #116]	; (8001ea8 <HAL_DMA_Abort_IT+0xdc>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d012      	beq.n	8001e5c <HAL_DMA_Abort_IT+0x90>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a1c      	ldr	r2, [pc, #112]	; (8001eac <HAL_DMA_Abort_IT+0xe0>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d00a      	beq.n	8001e56 <HAL_DMA_Abort_IT+0x8a>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a1a      	ldr	r2, [pc, #104]	; (8001eb0 <HAL_DMA_Abort_IT+0xe4>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d102      	bne.n	8001e50 <HAL_DMA_Abort_IT+0x84>
 8001e4a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001e4e:	e00e      	b.n	8001e6e <HAL_DMA_Abort_IT+0xa2>
 8001e50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e54:	e00b      	b.n	8001e6e <HAL_DMA_Abort_IT+0xa2>
 8001e56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e5a:	e008      	b.n	8001e6e <HAL_DMA_Abort_IT+0xa2>
 8001e5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e60:	e005      	b.n	8001e6e <HAL_DMA_Abort_IT+0xa2>
 8001e62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e66:	e002      	b.n	8001e6e <HAL_DMA_Abort_IT+0xa2>
 8001e68:	2310      	movs	r3, #16
 8001e6a:	e000      	b.n	8001e6e <HAL_DMA_Abort_IT+0xa2>
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	4a11      	ldr	r2, [pc, #68]	; (8001eb4 <HAL_DMA_Abort_IT+0xe8>)
 8001e70:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	4798      	blx	r3
    } 
  }
  return status;
 8001e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40020008 	.word	0x40020008
 8001ea0:	4002001c 	.word	0x4002001c
 8001ea4:	40020030 	.word	0x40020030
 8001ea8:	40020044 	.word	0x40020044
 8001eac:	40020058 	.word	0x40020058
 8001eb0:	4002006c 	.word	0x4002006c
 8001eb4:	40020000 	.word	0x40020000

08001eb8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed4:	2204      	movs	r2, #4
 8001ed6:	409a      	lsls	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	4013      	ands	r3, r2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d04f      	beq.n	8001f80 <HAL_DMA_IRQHandler+0xc8>
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	f003 0304 	and.w	r3, r3, #4
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d04a      	beq.n	8001f80 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0320 	and.w	r3, r3, #32
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d107      	bne.n	8001f08 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 0204 	bic.w	r2, r2, #4
 8001f06:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a66      	ldr	r2, [pc, #408]	; (80020a8 <HAL_DMA_IRQHandler+0x1f0>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d029      	beq.n	8001f66 <HAL_DMA_IRQHandler+0xae>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a65      	ldr	r2, [pc, #404]	; (80020ac <HAL_DMA_IRQHandler+0x1f4>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d022      	beq.n	8001f62 <HAL_DMA_IRQHandler+0xaa>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a63      	ldr	r2, [pc, #396]	; (80020b0 <HAL_DMA_IRQHandler+0x1f8>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d01a      	beq.n	8001f5c <HAL_DMA_IRQHandler+0xa4>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a62      	ldr	r2, [pc, #392]	; (80020b4 <HAL_DMA_IRQHandler+0x1fc>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d012      	beq.n	8001f56 <HAL_DMA_IRQHandler+0x9e>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a60      	ldr	r2, [pc, #384]	; (80020b8 <HAL_DMA_IRQHandler+0x200>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d00a      	beq.n	8001f50 <HAL_DMA_IRQHandler+0x98>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a5f      	ldr	r2, [pc, #380]	; (80020bc <HAL_DMA_IRQHandler+0x204>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d102      	bne.n	8001f4a <HAL_DMA_IRQHandler+0x92>
 8001f44:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f48:	e00e      	b.n	8001f68 <HAL_DMA_IRQHandler+0xb0>
 8001f4a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001f4e:	e00b      	b.n	8001f68 <HAL_DMA_IRQHandler+0xb0>
 8001f50:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001f54:	e008      	b.n	8001f68 <HAL_DMA_IRQHandler+0xb0>
 8001f56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f5a:	e005      	b.n	8001f68 <HAL_DMA_IRQHandler+0xb0>
 8001f5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f60:	e002      	b.n	8001f68 <HAL_DMA_IRQHandler+0xb0>
 8001f62:	2340      	movs	r3, #64	; 0x40
 8001f64:	e000      	b.n	8001f68 <HAL_DMA_IRQHandler+0xb0>
 8001f66:	2304      	movs	r3, #4
 8001f68:	4a55      	ldr	r2, [pc, #340]	; (80020c0 <HAL_DMA_IRQHandler+0x208>)
 8001f6a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f000 8094 	beq.w	800209e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001f7e:	e08e      	b.n	800209e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f84:	2202      	movs	r2, #2
 8001f86:	409a      	lsls	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d056      	beq.n	800203e <HAL_DMA_IRQHandler+0x186>
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d051      	beq.n	800203e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0320 	and.w	r3, r3, #32
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d10b      	bne.n	8001fc0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f022 020a 	bic.w	r2, r2, #10
 8001fb6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a38      	ldr	r2, [pc, #224]	; (80020a8 <HAL_DMA_IRQHandler+0x1f0>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d029      	beq.n	800201e <HAL_DMA_IRQHandler+0x166>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a37      	ldr	r2, [pc, #220]	; (80020ac <HAL_DMA_IRQHandler+0x1f4>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d022      	beq.n	800201a <HAL_DMA_IRQHandler+0x162>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a35      	ldr	r2, [pc, #212]	; (80020b0 <HAL_DMA_IRQHandler+0x1f8>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d01a      	beq.n	8002014 <HAL_DMA_IRQHandler+0x15c>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a34      	ldr	r2, [pc, #208]	; (80020b4 <HAL_DMA_IRQHandler+0x1fc>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d012      	beq.n	800200e <HAL_DMA_IRQHandler+0x156>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a32      	ldr	r2, [pc, #200]	; (80020b8 <HAL_DMA_IRQHandler+0x200>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d00a      	beq.n	8002008 <HAL_DMA_IRQHandler+0x150>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a31      	ldr	r2, [pc, #196]	; (80020bc <HAL_DMA_IRQHandler+0x204>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d102      	bne.n	8002002 <HAL_DMA_IRQHandler+0x14a>
 8001ffc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002000:	e00e      	b.n	8002020 <HAL_DMA_IRQHandler+0x168>
 8002002:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002006:	e00b      	b.n	8002020 <HAL_DMA_IRQHandler+0x168>
 8002008:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800200c:	e008      	b.n	8002020 <HAL_DMA_IRQHandler+0x168>
 800200e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002012:	e005      	b.n	8002020 <HAL_DMA_IRQHandler+0x168>
 8002014:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002018:	e002      	b.n	8002020 <HAL_DMA_IRQHandler+0x168>
 800201a:	2320      	movs	r3, #32
 800201c:	e000      	b.n	8002020 <HAL_DMA_IRQHandler+0x168>
 800201e:	2302      	movs	r3, #2
 8002020:	4a27      	ldr	r2, [pc, #156]	; (80020c0 <HAL_DMA_IRQHandler+0x208>)
 8002022:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002030:	2b00      	cmp	r3, #0
 8002032:	d034      	beq.n	800209e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800203c:	e02f      	b.n	800209e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	2208      	movs	r2, #8
 8002044:	409a      	lsls	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	4013      	ands	r3, r2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d028      	beq.n	80020a0 <HAL_DMA_IRQHandler+0x1e8>
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	f003 0308 	and.w	r3, r3, #8
 8002054:	2b00      	cmp	r3, #0
 8002056:	d023      	beq.n	80020a0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 020e 	bic.w	r2, r2, #14
 8002066:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002070:	2101      	movs	r1, #1
 8002072:	fa01 f202 	lsl.w	r2, r1, r2
 8002076:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	2b00      	cmp	r3, #0
 8002094:	d004      	beq.n	80020a0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	4798      	blx	r3
    }
  }
  return;
 800209e:	bf00      	nop
 80020a0:	bf00      	nop
}
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40020008 	.word	0x40020008
 80020ac:	4002001c 	.word	0x4002001c
 80020b0:	40020030 	.word	0x40020030
 80020b4:	40020044 	.word	0x40020044
 80020b8:	40020058 	.word	0x40020058
 80020bc:	4002006c 	.word	0x4002006c
 80020c0:	40020000 	.word	0x40020000

080020c4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
 80020d0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020da:	2101      	movs	r1, #1
 80020dc:	fa01 f202 	lsl.w	r2, r1, r2
 80020e0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b10      	cmp	r3, #16
 80020f0:	d108      	bne.n	8002104 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68ba      	ldr	r2, [r7, #8]
 8002100:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002102:	e007      	b.n	8002114 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68ba      	ldr	r2, [r7, #8]
 800210a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	60da      	str	r2, [r3, #12]
}
 8002114:	bf00      	nop
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	bc80      	pop	{r7}
 800211c:	4770      	bx	lr
	...

08002120 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002120:	b480      	push	{r7}
 8002122:	b08b      	sub	sp, #44	; 0x2c
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800212a:	2300      	movs	r3, #0
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800212e:	2300      	movs	r3, #0
 8002130:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002132:	e161      	b.n	80023f8 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002134:	2201      	movs	r2, #1
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	69fa      	ldr	r2, [r7, #28]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	429a      	cmp	r2, r3
 800214e:	f040 8150 	bne.w	80023f2 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	4a97      	ldr	r2, [pc, #604]	; (80023b4 <HAL_GPIO_Init+0x294>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d05e      	beq.n	800221a <HAL_GPIO_Init+0xfa>
 800215c:	4a95      	ldr	r2, [pc, #596]	; (80023b4 <HAL_GPIO_Init+0x294>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d875      	bhi.n	800224e <HAL_GPIO_Init+0x12e>
 8002162:	4a95      	ldr	r2, [pc, #596]	; (80023b8 <HAL_GPIO_Init+0x298>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d058      	beq.n	800221a <HAL_GPIO_Init+0xfa>
 8002168:	4a93      	ldr	r2, [pc, #588]	; (80023b8 <HAL_GPIO_Init+0x298>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d86f      	bhi.n	800224e <HAL_GPIO_Init+0x12e>
 800216e:	4a93      	ldr	r2, [pc, #588]	; (80023bc <HAL_GPIO_Init+0x29c>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d052      	beq.n	800221a <HAL_GPIO_Init+0xfa>
 8002174:	4a91      	ldr	r2, [pc, #580]	; (80023bc <HAL_GPIO_Init+0x29c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d869      	bhi.n	800224e <HAL_GPIO_Init+0x12e>
 800217a:	4a91      	ldr	r2, [pc, #580]	; (80023c0 <HAL_GPIO_Init+0x2a0>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d04c      	beq.n	800221a <HAL_GPIO_Init+0xfa>
 8002180:	4a8f      	ldr	r2, [pc, #572]	; (80023c0 <HAL_GPIO_Init+0x2a0>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d863      	bhi.n	800224e <HAL_GPIO_Init+0x12e>
 8002186:	4a8f      	ldr	r2, [pc, #572]	; (80023c4 <HAL_GPIO_Init+0x2a4>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d046      	beq.n	800221a <HAL_GPIO_Init+0xfa>
 800218c:	4a8d      	ldr	r2, [pc, #564]	; (80023c4 <HAL_GPIO_Init+0x2a4>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d85d      	bhi.n	800224e <HAL_GPIO_Init+0x12e>
 8002192:	2b12      	cmp	r3, #18
 8002194:	d82a      	bhi.n	80021ec <HAL_GPIO_Init+0xcc>
 8002196:	2b12      	cmp	r3, #18
 8002198:	d859      	bhi.n	800224e <HAL_GPIO_Init+0x12e>
 800219a:	a201      	add	r2, pc, #4	; (adr r2, 80021a0 <HAL_GPIO_Init+0x80>)
 800219c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a0:	0800221b 	.word	0x0800221b
 80021a4:	080021f5 	.word	0x080021f5
 80021a8:	08002207 	.word	0x08002207
 80021ac:	08002249 	.word	0x08002249
 80021b0:	0800224f 	.word	0x0800224f
 80021b4:	0800224f 	.word	0x0800224f
 80021b8:	0800224f 	.word	0x0800224f
 80021bc:	0800224f 	.word	0x0800224f
 80021c0:	0800224f 	.word	0x0800224f
 80021c4:	0800224f 	.word	0x0800224f
 80021c8:	0800224f 	.word	0x0800224f
 80021cc:	0800224f 	.word	0x0800224f
 80021d0:	0800224f 	.word	0x0800224f
 80021d4:	0800224f 	.word	0x0800224f
 80021d8:	0800224f 	.word	0x0800224f
 80021dc:	0800224f 	.word	0x0800224f
 80021e0:	0800224f 	.word	0x0800224f
 80021e4:	080021fd 	.word	0x080021fd
 80021e8:	08002211 	.word	0x08002211
 80021ec:	4a76      	ldr	r2, [pc, #472]	; (80023c8 <HAL_GPIO_Init+0x2a8>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d013      	beq.n	800221a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021f2:	e02c      	b.n	800224e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	623b      	str	r3, [r7, #32]
          break;
 80021fa:	e029      	b.n	8002250 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	3304      	adds	r3, #4
 8002202:	623b      	str	r3, [r7, #32]
          break;
 8002204:	e024      	b.n	8002250 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	3308      	adds	r3, #8
 800220c:	623b      	str	r3, [r7, #32]
          break;
 800220e:	e01f      	b.n	8002250 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	330c      	adds	r3, #12
 8002216:	623b      	str	r3, [r7, #32]
          break;
 8002218:	e01a      	b.n	8002250 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d102      	bne.n	8002228 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002222:	2304      	movs	r3, #4
 8002224:	623b      	str	r3, [r7, #32]
          break;
 8002226:	e013      	b.n	8002250 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d105      	bne.n	800223c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002230:	2308      	movs	r3, #8
 8002232:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	69fa      	ldr	r2, [r7, #28]
 8002238:	611a      	str	r2, [r3, #16]
          break;
 800223a:	e009      	b.n	8002250 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800223c:	2308      	movs	r3, #8
 800223e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69fa      	ldr	r2, [r7, #28]
 8002244:	615a      	str	r2, [r3, #20]
          break;
 8002246:	e003      	b.n	8002250 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002248:	2300      	movs	r3, #0
 800224a:	623b      	str	r3, [r7, #32]
          break;
 800224c:	e000      	b.n	8002250 <HAL_GPIO_Init+0x130>
          break;
 800224e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	2bff      	cmp	r3, #255	; 0xff
 8002254:	d801      	bhi.n	800225a <HAL_GPIO_Init+0x13a>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	e001      	b.n	800225e <HAL_GPIO_Init+0x13e>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	3304      	adds	r3, #4
 800225e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	2bff      	cmp	r3, #255	; 0xff
 8002264:	d802      	bhi.n	800226c <HAL_GPIO_Init+0x14c>
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	e002      	b.n	8002272 <HAL_GPIO_Init+0x152>
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	3b08      	subs	r3, #8
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	210f      	movs	r1, #15
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	fa01 f303 	lsl.w	r3, r1, r3
 8002280:	43db      	mvns	r3, r3
 8002282:	401a      	ands	r2, r3
 8002284:	6a39      	ldr	r1, [r7, #32]
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	fa01 f303 	lsl.w	r3, r1, r3
 800228c:	431a      	orrs	r2, r3
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	f000 80a9 	beq.w	80023f2 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022a0:	4b4a      	ldr	r3, [pc, #296]	; (80023cc <HAL_GPIO_Init+0x2ac>)
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	4a49      	ldr	r2, [pc, #292]	; (80023cc <HAL_GPIO_Init+0x2ac>)
 80022a6:	f043 0301 	orr.w	r3, r3, #1
 80022aa:	6193      	str	r3, [r2, #24]
 80022ac:	4b47      	ldr	r3, [pc, #284]	; (80023cc <HAL_GPIO_Init+0x2ac>)
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	60bb      	str	r3, [r7, #8]
 80022b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022b8:	4a45      	ldr	r2, [pc, #276]	; (80023d0 <HAL_GPIO_Init+0x2b0>)
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	089b      	lsrs	r3, r3, #2
 80022be:	3302      	adds	r3, #2
 80022c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	f003 0303 	and.w	r3, r3, #3
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	220f      	movs	r2, #15
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	43db      	mvns	r3, r3
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	4013      	ands	r3, r2
 80022da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a3d      	ldr	r2, [pc, #244]	; (80023d4 <HAL_GPIO_Init+0x2b4>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d00d      	beq.n	8002300 <HAL_GPIO_Init+0x1e0>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a3c      	ldr	r2, [pc, #240]	; (80023d8 <HAL_GPIO_Init+0x2b8>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d007      	beq.n	80022fc <HAL_GPIO_Init+0x1dc>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a3b      	ldr	r2, [pc, #236]	; (80023dc <HAL_GPIO_Init+0x2bc>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d101      	bne.n	80022f8 <HAL_GPIO_Init+0x1d8>
 80022f4:	2302      	movs	r3, #2
 80022f6:	e004      	b.n	8002302 <HAL_GPIO_Init+0x1e2>
 80022f8:	2303      	movs	r3, #3
 80022fa:	e002      	b.n	8002302 <HAL_GPIO_Init+0x1e2>
 80022fc:	2301      	movs	r3, #1
 80022fe:	e000      	b.n	8002302 <HAL_GPIO_Init+0x1e2>
 8002300:	2300      	movs	r3, #0
 8002302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002304:	f002 0203 	and.w	r2, r2, #3
 8002308:	0092      	lsls	r2, r2, #2
 800230a:	4093      	lsls	r3, r2
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	4313      	orrs	r3, r2
 8002310:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002312:	492f      	ldr	r1, [pc, #188]	; (80023d0 <HAL_GPIO_Init+0x2b0>)
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	089b      	lsrs	r3, r3, #2
 8002318:	3302      	adds	r3, #2
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d006      	beq.n	800233a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800232c:	4b2c      	ldr	r3, [pc, #176]	; (80023e0 <HAL_GPIO_Init+0x2c0>)
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	492b      	ldr	r1, [pc, #172]	; (80023e0 <HAL_GPIO_Init+0x2c0>)
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	4313      	orrs	r3, r2
 8002336:	600b      	str	r3, [r1, #0]
 8002338:	e006      	b.n	8002348 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800233a:	4b29      	ldr	r3, [pc, #164]	; (80023e0 <HAL_GPIO_Init+0x2c0>)
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	43db      	mvns	r3, r3
 8002342:	4927      	ldr	r1, [pc, #156]	; (80023e0 <HAL_GPIO_Init+0x2c0>)
 8002344:	4013      	ands	r3, r2
 8002346:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d006      	beq.n	8002362 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002354:	4b22      	ldr	r3, [pc, #136]	; (80023e0 <HAL_GPIO_Init+0x2c0>)
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	4921      	ldr	r1, [pc, #132]	; (80023e0 <HAL_GPIO_Init+0x2c0>)
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	4313      	orrs	r3, r2
 800235e:	604b      	str	r3, [r1, #4]
 8002360:	e006      	b.n	8002370 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002362:	4b1f      	ldr	r3, [pc, #124]	; (80023e0 <HAL_GPIO_Init+0x2c0>)
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	43db      	mvns	r3, r3
 800236a:	491d      	ldr	r1, [pc, #116]	; (80023e0 <HAL_GPIO_Init+0x2c0>)
 800236c:	4013      	ands	r3, r2
 800236e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d006      	beq.n	800238a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800237c:	4b18      	ldr	r3, [pc, #96]	; (80023e0 <HAL_GPIO_Init+0x2c0>)
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	4917      	ldr	r1, [pc, #92]	; (80023e0 <HAL_GPIO_Init+0x2c0>)
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	4313      	orrs	r3, r2
 8002386:	608b      	str	r3, [r1, #8]
 8002388:	e006      	b.n	8002398 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800238a:	4b15      	ldr	r3, [pc, #84]	; (80023e0 <HAL_GPIO_Init+0x2c0>)
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	43db      	mvns	r3, r3
 8002392:	4913      	ldr	r1, [pc, #76]	; (80023e0 <HAL_GPIO_Init+0x2c0>)
 8002394:	4013      	ands	r3, r2
 8002396:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d01f      	beq.n	80023e4 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023a4:	4b0e      	ldr	r3, [pc, #56]	; (80023e0 <HAL_GPIO_Init+0x2c0>)
 80023a6:	68da      	ldr	r2, [r3, #12]
 80023a8:	490d      	ldr	r1, [pc, #52]	; (80023e0 <HAL_GPIO_Init+0x2c0>)
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	60cb      	str	r3, [r1, #12]
 80023b0:	e01f      	b.n	80023f2 <HAL_GPIO_Init+0x2d2>
 80023b2:	bf00      	nop
 80023b4:	10320000 	.word	0x10320000
 80023b8:	10310000 	.word	0x10310000
 80023bc:	10220000 	.word	0x10220000
 80023c0:	10210000 	.word	0x10210000
 80023c4:	10120000 	.word	0x10120000
 80023c8:	10110000 	.word	0x10110000
 80023cc:	40021000 	.word	0x40021000
 80023d0:	40010000 	.word	0x40010000
 80023d4:	40010800 	.word	0x40010800
 80023d8:	40010c00 	.word	0x40010c00
 80023dc:	40011000 	.word	0x40011000
 80023e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023e4:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <HAL_GPIO_Init+0x2f4>)
 80023e6:	68da      	ldr	r2, [r3, #12]
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	43db      	mvns	r3, r3
 80023ec:	4909      	ldr	r1, [pc, #36]	; (8002414 <HAL_GPIO_Init+0x2f4>)
 80023ee:	4013      	ands	r3, r2
 80023f0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80023f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f4:	3301      	adds	r3, #1
 80023f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	f47f ae96 	bne.w	8002134 <HAL_GPIO_Init+0x14>
  }
}
 8002408:	bf00      	nop
 800240a:	bf00      	nop
 800240c:	372c      	adds	r7, #44	; 0x2c
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr
 8002414:	40010400 	.word	0x40010400

08002418 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e272      	b.n	8002910 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b00      	cmp	r3, #0
 8002434:	f000 8087 	beq.w	8002546 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002438:	4b92      	ldr	r3, [pc, #584]	; (8002684 <HAL_RCC_OscConfig+0x26c>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 030c 	and.w	r3, r3, #12
 8002440:	2b04      	cmp	r3, #4
 8002442:	d00c      	beq.n	800245e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002444:	4b8f      	ldr	r3, [pc, #572]	; (8002684 <HAL_RCC_OscConfig+0x26c>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 030c 	and.w	r3, r3, #12
 800244c:	2b08      	cmp	r3, #8
 800244e:	d112      	bne.n	8002476 <HAL_RCC_OscConfig+0x5e>
 8002450:	4b8c      	ldr	r3, [pc, #560]	; (8002684 <HAL_RCC_OscConfig+0x26c>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800245c:	d10b      	bne.n	8002476 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800245e:	4b89      	ldr	r3, [pc, #548]	; (8002684 <HAL_RCC_OscConfig+0x26c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d06c      	beq.n	8002544 <HAL_RCC_OscConfig+0x12c>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d168      	bne.n	8002544 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e24c      	b.n	8002910 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800247e:	d106      	bne.n	800248e <HAL_RCC_OscConfig+0x76>
 8002480:	4b80      	ldr	r3, [pc, #512]	; (8002684 <HAL_RCC_OscConfig+0x26c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a7f      	ldr	r2, [pc, #508]	; (8002684 <HAL_RCC_OscConfig+0x26c>)
 8002486:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800248a:	6013      	str	r3, [r2, #0]
 800248c:	e02e      	b.n	80024ec <HAL_RCC_OscConfig+0xd4>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10c      	bne.n	80024b0 <HAL_RCC_OscConfig+0x98>
 8002496:	4b7b      	ldr	r3, [pc, #492]	; (8002684 <HAL_RCC_OscConfig+0x26c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a7a      	ldr	r2, [pc, #488]	; (8002684 <HAL_RCC_OscConfig+0x26c>)
 800249c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	4b78      	ldr	r3, [pc, #480]	; (8002684 <HAL_RCC_OscConfig+0x26c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a77      	ldr	r2, [pc, #476]	; (8002684 <HAL_RCC_OscConfig+0x26c>)
 80024a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	e01d      	b.n	80024ec <HAL_RCC_OscConfig+0xd4>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024b8:	d10c      	bne.n	80024d4 <HAL_RCC_OscConfig+0xbc>
 80024ba:	4b72      	ldr	r3, [pc, #456]	; (8002684 <HAL_RCC_OscConfig+0x26c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a71      	ldr	r2, [pc, #452]	; (8002684 <HAL_RCC_OscConfig+0x26c>)
 80024c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	4b6f      	ldr	r3, [pc, #444]	; (8002684 <HAL_RCC_OscConfig+0x26c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a6e      	ldr	r2, [pc, #440]	; (8002684 <HAL_RCC_OscConfig+0x26c>)
 80024cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d0:	6013      	str	r3, [r2, #0]
 80024d2:	e00b      	b.n	80024ec <HAL_RCC_OscConfig+0xd4>
 80024d4:	4b6b      	ldr	r3, [pc, #428]	; (8002684 <HAL_RCC_OscConfig+0x26c>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a6a      	ldr	r2, [pc, #424]	; (8002684 <HAL_RCC_OscConfig+0x26c>)
 80024da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024de:	6013      	str	r3, [r2, #0]
 80024e0:	4b68      	ldr	r3, [pc, #416]	; (8002684 <HAL_RCC_OscConfig+0x26c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a67      	ldr	r2, [pc, #412]	; (8002684 <HAL_RCC_OscConfig+0x26c>)
 80024e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d013      	beq.n	800251c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f4:	f7ff fa74 	bl	80019e0 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024fc:	f7ff fa70 	bl	80019e0 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b64      	cmp	r3, #100	; 0x64
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e200      	b.n	8002910 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800250e:	4b5d      	ldr	r3, [pc, #372]	; (8002684 <HAL_RCC_OscConfig+0x26c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0f0      	beq.n	80024fc <HAL_RCC_OscConfig+0xe4>
 800251a:	e014      	b.n	8002546 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251c:	f7ff fa60 	bl	80019e0 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002524:	f7ff fa5c 	bl	80019e0 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b64      	cmp	r3, #100	; 0x64
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e1ec      	b.n	8002910 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002536:	4b53      	ldr	r3, [pc, #332]	; (8002684 <HAL_RCC_OscConfig+0x26c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1f0      	bne.n	8002524 <HAL_RCC_OscConfig+0x10c>
 8002542:	e000      	b.n	8002546 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002544:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d063      	beq.n	800261a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002552:	4b4c      	ldr	r3, [pc, #304]	; (8002684 <HAL_RCC_OscConfig+0x26c>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f003 030c 	and.w	r3, r3, #12
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00b      	beq.n	8002576 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800255e:	4b49      	ldr	r3, [pc, #292]	; (8002684 <HAL_RCC_OscConfig+0x26c>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f003 030c 	and.w	r3, r3, #12
 8002566:	2b08      	cmp	r3, #8
 8002568:	d11c      	bne.n	80025a4 <HAL_RCC_OscConfig+0x18c>
 800256a:	4b46      	ldr	r3, [pc, #280]	; (8002684 <HAL_RCC_OscConfig+0x26c>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d116      	bne.n	80025a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002576:	4b43      	ldr	r3, [pc, #268]	; (8002684 <HAL_RCC_OscConfig+0x26c>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d005      	beq.n	800258e <HAL_RCC_OscConfig+0x176>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d001      	beq.n	800258e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e1c0      	b.n	8002910 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800258e:	4b3d      	ldr	r3, [pc, #244]	; (8002684 <HAL_RCC_OscConfig+0x26c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	4939      	ldr	r1, [pc, #228]	; (8002684 <HAL_RCC_OscConfig+0x26c>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025a2:	e03a      	b.n	800261a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d020      	beq.n	80025ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025ac:	4b36      	ldr	r3, [pc, #216]	; (8002688 <HAL_RCC_OscConfig+0x270>)
 80025ae:	2201      	movs	r2, #1
 80025b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b2:	f7ff fa15 	bl	80019e0 <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b8:	e008      	b.n	80025cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ba:	f7ff fa11 	bl	80019e0 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e1a1      	b.n	8002910 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025cc:	4b2d      	ldr	r3, [pc, #180]	; (8002684 <HAL_RCC_OscConfig+0x26c>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d0f0      	beq.n	80025ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d8:	4b2a      	ldr	r3, [pc, #168]	; (8002684 <HAL_RCC_OscConfig+0x26c>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	4927      	ldr	r1, [pc, #156]	; (8002684 <HAL_RCC_OscConfig+0x26c>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	600b      	str	r3, [r1, #0]
 80025ec:	e015      	b.n	800261a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ee:	4b26      	ldr	r3, [pc, #152]	; (8002688 <HAL_RCC_OscConfig+0x270>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f4:	f7ff f9f4 	bl	80019e0 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025fc:	f7ff f9f0 	bl	80019e0 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e180      	b.n	8002910 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800260e:	4b1d      	ldr	r3, [pc, #116]	; (8002684 <HAL_RCC_OscConfig+0x26c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1f0      	bne.n	80025fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0308 	and.w	r3, r3, #8
 8002622:	2b00      	cmp	r3, #0
 8002624:	d03a      	beq.n	800269c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d019      	beq.n	8002662 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800262e:	4b17      	ldr	r3, [pc, #92]	; (800268c <HAL_RCC_OscConfig+0x274>)
 8002630:	2201      	movs	r2, #1
 8002632:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002634:	f7ff f9d4 	bl	80019e0 <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800263c:	f7ff f9d0 	bl	80019e0 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e160      	b.n	8002910 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800264e:	4b0d      	ldr	r3, [pc, #52]	; (8002684 <HAL_RCC_OscConfig+0x26c>)
 8002650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d0f0      	beq.n	800263c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800265a:	2001      	movs	r0, #1
 800265c:	f000 faa6 	bl	8002bac <RCC_Delay>
 8002660:	e01c      	b.n	800269c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002662:	4b0a      	ldr	r3, [pc, #40]	; (800268c <HAL_RCC_OscConfig+0x274>)
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002668:	f7ff f9ba 	bl	80019e0 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800266e:	e00f      	b.n	8002690 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002670:	f7ff f9b6 	bl	80019e0 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d908      	bls.n	8002690 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e146      	b.n	8002910 <HAL_RCC_OscConfig+0x4f8>
 8002682:	bf00      	nop
 8002684:	40021000 	.word	0x40021000
 8002688:	42420000 	.word	0x42420000
 800268c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002690:	4b92      	ldr	r3, [pc, #584]	; (80028dc <HAL_RCC_OscConfig+0x4c4>)
 8002692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1e9      	bne.n	8002670 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f000 80a6 	beq.w	80027f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026aa:	2300      	movs	r3, #0
 80026ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ae:	4b8b      	ldr	r3, [pc, #556]	; (80028dc <HAL_RCC_OscConfig+0x4c4>)
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10d      	bne.n	80026d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ba:	4b88      	ldr	r3, [pc, #544]	; (80028dc <HAL_RCC_OscConfig+0x4c4>)
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	4a87      	ldr	r2, [pc, #540]	; (80028dc <HAL_RCC_OscConfig+0x4c4>)
 80026c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c4:	61d3      	str	r3, [r2, #28]
 80026c6:	4b85      	ldr	r3, [pc, #532]	; (80028dc <HAL_RCC_OscConfig+0x4c4>)
 80026c8:	69db      	ldr	r3, [r3, #28]
 80026ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ce:	60bb      	str	r3, [r7, #8]
 80026d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026d2:	2301      	movs	r3, #1
 80026d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d6:	4b82      	ldr	r3, [pc, #520]	; (80028e0 <HAL_RCC_OscConfig+0x4c8>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d118      	bne.n	8002714 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026e2:	4b7f      	ldr	r3, [pc, #508]	; (80028e0 <HAL_RCC_OscConfig+0x4c8>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a7e      	ldr	r2, [pc, #504]	; (80028e0 <HAL_RCC_OscConfig+0x4c8>)
 80026e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ee:	f7ff f977 	bl	80019e0 <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026f6:	f7ff f973 	bl	80019e0 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b64      	cmp	r3, #100	; 0x64
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e103      	b.n	8002910 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002708:	4b75      	ldr	r3, [pc, #468]	; (80028e0 <HAL_RCC_OscConfig+0x4c8>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0f0      	beq.n	80026f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d106      	bne.n	800272a <HAL_RCC_OscConfig+0x312>
 800271c:	4b6f      	ldr	r3, [pc, #444]	; (80028dc <HAL_RCC_OscConfig+0x4c4>)
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	4a6e      	ldr	r2, [pc, #440]	; (80028dc <HAL_RCC_OscConfig+0x4c4>)
 8002722:	f043 0301 	orr.w	r3, r3, #1
 8002726:	6213      	str	r3, [r2, #32]
 8002728:	e02d      	b.n	8002786 <HAL_RCC_OscConfig+0x36e>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10c      	bne.n	800274c <HAL_RCC_OscConfig+0x334>
 8002732:	4b6a      	ldr	r3, [pc, #424]	; (80028dc <HAL_RCC_OscConfig+0x4c4>)
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	4a69      	ldr	r2, [pc, #420]	; (80028dc <HAL_RCC_OscConfig+0x4c4>)
 8002738:	f023 0301 	bic.w	r3, r3, #1
 800273c:	6213      	str	r3, [r2, #32]
 800273e:	4b67      	ldr	r3, [pc, #412]	; (80028dc <HAL_RCC_OscConfig+0x4c4>)
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	4a66      	ldr	r2, [pc, #408]	; (80028dc <HAL_RCC_OscConfig+0x4c4>)
 8002744:	f023 0304 	bic.w	r3, r3, #4
 8002748:	6213      	str	r3, [r2, #32]
 800274a:	e01c      	b.n	8002786 <HAL_RCC_OscConfig+0x36e>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	2b05      	cmp	r3, #5
 8002752:	d10c      	bne.n	800276e <HAL_RCC_OscConfig+0x356>
 8002754:	4b61      	ldr	r3, [pc, #388]	; (80028dc <HAL_RCC_OscConfig+0x4c4>)
 8002756:	6a1b      	ldr	r3, [r3, #32]
 8002758:	4a60      	ldr	r2, [pc, #384]	; (80028dc <HAL_RCC_OscConfig+0x4c4>)
 800275a:	f043 0304 	orr.w	r3, r3, #4
 800275e:	6213      	str	r3, [r2, #32]
 8002760:	4b5e      	ldr	r3, [pc, #376]	; (80028dc <HAL_RCC_OscConfig+0x4c4>)
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	4a5d      	ldr	r2, [pc, #372]	; (80028dc <HAL_RCC_OscConfig+0x4c4>)
 8002766:	f043 0301 	orr.w	r3, r3, #1
 800276a:	6213      	str	r3, [r2, #32]
 800276c:	e00b      	b.n	8002786 <HAL_RCC_OscConfig+0x36e>
 800276e:	4b5b      	ldr	r3, [pc, #364]	; (80028dc <HAL_RCC_OscConfig+0x4c4>)
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	4a5a      	ldr	r2, [pc, #360]	; (80028dc <HAL_RCC_OscConfig+0x4c4>)
 8002774:	f023 0301 	bic.w	r3, r3, #1
 8002778:	6213      	str	r3, [r2, #32]
 800277a:	4b58      	ldr	r3, [pc, #352]	; (80028dc <HAL_RCC_OscConfig+0x4c4>)
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	4a57      	ldr	r2, [pc, #348]	; (80028dc <HAL_RCC_OscConfig+0x4c4>)
 8002780:	f023 0304 	bic.w	r3, r3, #4
 8002784:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d015      	beq.n	80027ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800278e:	f7ff f927 	bl	80019e0 <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002794:	e00a      	b.n	80027ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002796:	f7ff f923 	bl	80019e0 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e0b1      	b.n	8002910 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ac:	4b4b      	ldr	r3, [pc, #300]	; (80028dc <HAL_RCC_OscConfig+0x4c4>)
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d0ee      	beq.n	8002796 <HAL_RCC_OscConfig+0x37e>
 80027b8:	e014      	b.n	80027e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ba:	f7ff f911 	bl	80019e0 <HAL_GetTick>
 80027be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027c0:	e00a      	b.n	80027d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027c2:	f7ff f90d 	bl	80019e0 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e09b      	b.n	8002910 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027d8:	4b40      	ldr	r3, [pc, #256]	; (80028dc <HAL_RCC_OscConfig+0x4c4>)
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1ee      	bne.n	80027c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027e4:	7dfb      	ldrb	r3, [r7, #23]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d105      	bne.n	80027f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ea:	4b3c      	ldr	r3, [pc, #240]	; (80028dc <HAL_RCC_OscConfig+0x4c4>)
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	4a3b      	ldr	r2, [pc, #236]	; (80028dc <HAL_RCC_OscConfig+0x4c4>)
 80027f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f000 8087 	beq.w	800290e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002800:	4b36      	ldr	r3, [pc, #216]	; (80028dc <HAL_RCC_OscConfig+0x4c4>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f003 030c 	and.w	r3, r3, #12
 8002808:	2b08      	cmp	r3, #8
 800280a:	d061      	beq.n	80028d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	69db      	ldr	r3, [r3, #28]
 8002810:	2b02      	cmp	r3, #2
 8002812:	d146      	bne.n	80028a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002814:	4b33      	ldr	r3, [pc, #204]	; (80028e4 <HAL_RCC_OscConfig+0x4cc>)
 8002816:	2200      	movs	r2, #0
 8002818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281a:	f7ff f8e1 	bl	80019e0 <HAL_GetTick>
 800281e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002820:	e008      	b.n	8002834 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002822:	f7ff f8dd 	bl	80019e0 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e06d      	b.n	8002910 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002834:	4b29      	ldr	r3, [pc, #164]	; (80028dc <HAL_RCC_OscConfig+0x4c4>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1f0      	bne.n	8002822 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002848:	d108      	bne.n	800285c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800284a:	4b24      	ldr	r3, [pc, #144]	; (80028dc <HAL_RCC_OscConfig+0x4c4>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	4921      	ldr	r1, [pc, #132]	; (80028dc <HAL_RCC_OscConfig+0x4c4>)
 8002858:	4313      	orrs	r3, r2
 800285a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800285c:	4b1f      	ldr	r3, [pc, #124]	; (80028dc <HAL_RCC_OscConfig+0x4c4>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a19      	ldr	r1, [r3, #32]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286c:	430b      	orrs	r3, r1
 800286e:	491b      	ldr	r1, [pc, #108]	; (80028dc <HAL_RCC_OscConfig+0x4c4>)
 8002870:	4313      	orrs	r3, r2
 8002872:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002874:	4b1b      	ldr	r3, [pc, #108]	; (80028e4 <HAL_RCC_OscConfig+0x4cc>)
 8002876:	2201      	movs	r2, #1
 8002878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287a:	f7ff f8b1 	bl	80019e0 <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002882:	f7ff f8ad 	bl	80019e0 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e03d      	b.n	8002910 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002894:	4b11      	ldr	r3, [pc, #68]	; (80028dc <HAL_RCC_OscConfig+0x4c4>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d0f0      	beq.n	8002882 <HAL_RCC_OscConfig+0x46a>
 80028a0:	e035      	b.n	800290e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028a2:	4b10      	ldr	r3, [pc, #64]	; (80028e4 <HAL_RCC_OscConfig+0x4cc>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a8:	f7ff f89a 	bl	80019e0 <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b0:	f7ff f896 	bl	80019e0 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e026      	b.n	8002910 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028c2:	4b06      	ldr	r3, [pc, #24]	; (80028dc <HAL_RCC_OscConfig+0x4c4>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1f0      	bne.n	80028b0 <HAL_RCC_OscConfig+0x498>
 80028ce:	e01e      	b.n	800290e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d107      	bne.n	80028e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e019      	b.n	8002910 <HAL_RCC_OscConfig+0x4f8>
 80028dc:	40021000 	.word	0x40021000
 80028e0:	40007000 	.word	0x40007000
 80028e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028e8:	4b0b      	ldr	r3, [pc, #44]	; (8002918 <HAL_RCC_OscConfig+0x500>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d106      	bne.n	800290a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002906:	429a      	cmp	r2, r3
 8002908:	d001      	beq.n	800290e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e000      	b.n	8002910 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3718      	adds	r7, #24
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40021000 	.word	0x40021000

0800291c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d101      	bne.n	8002930 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e0d0      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002930:	4b6a      	ldr	r3, [pc, #424]	; (8002adc <HAL_RCC_ClockConfig+0x1c0>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	429a      	cmp	r2, r3
 800293c:	d910      	bls.n	8002960 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800293e:	4b67      	ldr	r3, [pc, #412]	; (8002adc <HAL_RCC_ClockConfig+0x1c0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f023 0207 	bic.w	r2, r3, #7
 8002946:	4965      	ldr	r1, [pc, #404]	; (8002adc <HAL_RCC_ClockConfig+0x1c0>)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	4313      	orrs	r3, r2
 800294c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800294e:	4b63      	ldr	r3, [pc, #396]	; (8002adc <HAL_RCC_ClockConfig+0x1c0>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	429a      	cmp	r2, r3
 800295a:	d001      	beq.n	8002960 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e0b8      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d020      	beq.n	80029ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b00      	cmp	r3, #0
 8002976:	d005      	beq.n	8002984 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002978:	4b59      	ldr	r3, [pc, #356]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	4a58      	ldr	r2, [pc, #352]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 800297e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002982:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0308 	and.w	r3, r3, #8
 800298c:	2b00      	cmp	r3, #0
 800298e:	d005      	beq.n	800299c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002990:	4b53      	ldr	r3, [pc, #332]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	4a52      	ldr	r2, [pc, #328]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8002996:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800299a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800299c:	4b50      	ldr	r3, [pc, #320]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	494d      	ldr	r1, [pc, #308]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d040      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d107      	bne.n	80029d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c2:	4b47      	ldr	r3, [pc, #284]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d115      	bne.n	80029fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e07f      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d107      	bne.n	80029ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029da:	4b41      	ldr	r3, [pc, #260]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d109      	bne.n	80029fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e073      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ea:	4b3d      	ldr	r3, [pc, #244]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e06b      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029fa:	4b39      	ldr	r3, [pc, #228]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f023 0203 	bic.w	r2, r3, #3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	4936      	ldr	r1, [pc, #216]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a0c:	f7fe ffe8 	bl	80019e0 <HAL_GetTick>
 8002a10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a12:	e00a      	b.n	8002a2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a14:	f7fe ffe4 	bl	80019e0 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e053      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a2a:	4b2d      	ldr	r3, [pc, #180]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f003 020c 	and.w	r2, r3, #12
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d1eb      	bne.n	8002a14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a3c:	4b27      	ldr	r3, [pc, #156]	; (8002adc <HAL_RCC_ClockConfig+0x1c0>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0307 	and.w	r3, r3, #7
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d210      	bcs.n	8002a6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a4a:	4b24      	ldr	r3, [pc, #144]	; (8002adc <HAL_RCC_ClockConfig+0x1c0>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f023 0207 	bic.w	r2, r3, #7
 8002a52:	4922      	ldr	r1, [pc, #136]	; (8002adc <HAL_RCC_ClockConfig+0x1c0>)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a5a:	4b20      	ldr	r3, [pc, #128]	; (8002adc <HAL_RCC_ClockConfig+0x1c0>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d001      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e032      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d008      	beq.n	8002a8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a78:	4b19      	ldr	r3, [pc, #100]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	4916      	ldr	r1, [pc, #88]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0308 	and.w	r3, r3, #8
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d009      	beq.n	8002aaa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a96:	4b12      	ldr	r3, [pc, #72]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	490e      	ldr	r1, [pc, #56]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002aaa:	f000 f821 	bl	8002af0 <HAL_RCC_GetSysClockFreq>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	091b      	lsrs	r3, r3, #4
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	490a      	ldr	r1, [pc, #40]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8002abc:	5ccb      	ldrb	r3, [r1, r3]
 8002abe:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac2:	4a09      	ldr	r2, [pc, #36]	; (8002ae8 <HAL_RCC_ClockConfig+0x1cc>)
 8002ac4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ac6:	4b09      	ldr	r3, [pc, #36]	; (8002aec <HAL_RCC_ClockConfig+0x1d0>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fe ff46 	bl	800195c <HAL_InitTick>

  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	40022000 	.word	0x40022000
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	08003db0 	.word	0x08003db0
 8002ae8:	20000000 	.word	0x20000000
 8002aec:	20000004 	.word	0x20000004

08002af0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002af0:	b490      	push	{r4, r7}
 8002af2:	b08a      	sub	sp, #40	; 0x28
 8002af4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002af6:	4b29      	ldr	r3, [pc, #164]	; (8002b9c <HAL_RCC_GetSysClockFreq+0xac>)
 8002af8:	1d3c      	adds	r4, r7, #4
 8002afa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002afc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b00:	f240 2301 	movw	r3, #513	; 0x201
 8002b04:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b06:	2300      	movs	r3, #0
 8002b08:	61fb      	str	r3, [r7, #28]
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	61bb      	str	r3, [r7, #24]
 8002b0e:	2300      	movs	r3, #0
 8002b10:	627b      	str	r3, [r7, #36]	; 0x24
 8002b12:	2300      	movs	r3, #0
 8002b14:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b1a:	4b21      	ldr	r3, [pc, #132]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	f003 030c 	and.w	r3, r3, #12
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	d002      	beq.n	8002b30 <HAL_RCC_GetSysClockFreq+0x40>
 8002b2a:	2b08      	cmp	r3, #8
 8002b2c:	d003      	beq.n	8002b36 <HAL_RCC_GetSysClockFreq+0x46>
 8002b2e:	e02b      	b.n	8002b88 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b30:	4b1c      	ldr	r3, [pc, #112]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b32:	623b      	str	r3, [r7, #32]
      break;
 8002b34:	e02b      	b.n	8002b8e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	0c9b      	lsrs	r3, r3, #18
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	3328      	adds	r3, #40	; 0x28
 8002b40:	443b      	add	r3, r7
 8002b42:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b46:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d012      	beq.n	8002b78 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b52:	4b13      	ldr	r3, [pc, #76]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	0c5b      	lsrs	r3, r3, #17
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	3328      	adds	r3, #40	; 0x28
 8002b5e:	443b      	add	r3, r7
 8002b60:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b64:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	4a0e      	ldr	r2, [pc, #56]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b6a:	fb03 f202 	mul.w	r2, r3, r2
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b74:	627b      	str	r3, [r7, #36]	; 0x24
 8002b76:	e004      	b.n	8002b82 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	4a0b      	ldr	r2, [pc, #44]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b7c:	fb02 f303 	mul.w	r3, r2, r3
 8002b80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b84:	623b      	str	r3, [r7, #32]
      break;
 8002b86:	e002      	b.n	8002b8e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b88:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b8a:	623b      	str	r3, [r7, #32]
      break;
 8002b8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3728      	adds	r7, #40	; 0x28
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc90      	pop	{r4, r7}
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	08003da0 	.word	0x08003da0
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	007a1200 	.word	0x007a1200
 8002ba8:	003d0900 	.word	0x003d0900

08002bac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bb4:	4b0a      	ldr	r3, [pc, #40]	; (8002be0 <RCC_Delay+0x34>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a0a      	ldr	r2, [pc, #40]	; (8002be4 <RCC_Delay+0x38>)
 8002bba:	fba2 2303 	umull	r2, r3, r2, r3
 8002bbe:	0a5b      	lsrs	r3, r3, #9
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	fb02 f303 	mul.w	r3, r2, r3
 8002bc6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bc8:	bf00      	nop
  }
  while (Delay --);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	1e5a      	subs	r2, r3, #1
 8002bce:	60fa      	str	r2, [r7, #12]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1f9      	bne.n	8002bc8 <RCC_Delay+0x1c>
}
 8002bd4:	bf00      	nop
 8002bd6:	bf00      	nop
 8002bd8:	3714      	adds	r7, #20
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr
 8002be0:	20000000 	.word	0x20000000
 8002be4:	10624dd3 	.word	0x10624dd3

08002be8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e041      	b.n	8002c7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d106      	bne.n	8002c14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7fe fdb2 	bl	8001778 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2202      	movs	r2, #2
 8002c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	3304      	adds	r3, #4
 8002c24:	4619      	mov	r1, r3
 8002c26:	4610      	mov	r0, r2
 8002c28:	f000 fd3e 	bl	80036a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b082      	sub	sp, #8
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d101      	bne.n	8002c98 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e041      	b.n	8002d1c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d106      	bne.n	8002cb2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f839 	bl	8002d24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	3304      	adds	r3, #4
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	4610      	mov	r0, r2
 8002cc6:	f000 fcef 	bl	80036a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3708      	adds	r7, #8
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bc80      	pop	{r7}
 8002d34:	4770      	bx	lr
	...

08002d38 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
 8002d44:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d109      	bne.n	8002d60 <HAL_TIM_PWM_Start_DMA+0x28>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	bf0c      	ite	eq
 8002d58:	2301      	moveq	r3, #1
 8002d5a:	2300      	movne	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	e022      	b.n	8002da6 <HAL_TIM_PWM_Start_DMA+0x6e>
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	2b04      	cmp	r3, #4
 8002d64:	d109      	bne.n	8002d7a <HAL_TIM_PWM_Start_DMA+0x42>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	bf0c      	ite	eq
 8002d72:	2301      	moveq	r3, #1
 8002d74:	2300      	movne	r3, #0
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	e015      	b.n	8002da6 <HAL_TIM_PWM_Start_DMA+0x6e>
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	2b08      	cmp	r3, #8
 8002d7e:	d109      	bne.n	8002d94 <HAL_TIM_PWM_Start_DMA+0x5c>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	bf0c      	ite	eq
 8002d8c:	2301      	moveq	r3, #1
 8002d8e:	2300      	movne	r3, #0
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	e008      	b.n	8002da6 <HAL_TIM_PWM_Start_DMA+0x6e>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	bf0c      	ite	eq
 8002da0:	2301      	moveq	r3, #1
 8002da2:	2300      	movne	r3, #0
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 8002daa:	2302      	movs	r3, #2
 8002dac:	e149      	b.n	8003042 <HAL_TIM_PWM_Start_DMA+0x30a>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d109      	bne.n	8002dc8 <HAL_TIM_PWM_Start_DMA+0x90>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	bf0c      	ite	eq
 8002dc0:	2301      	moveq	r3, #1
 8002dc2:	2300      	movne	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	e022      	b.n	8002e0e <HAL_TIM_PWM_Start_DMA+0xd6>
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	d109      	bne.n	8002de2 <HAL_TIM_PWM_Start_DMA+0xaa>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	bf0c      	ite	eq
 8002dda:	2301      	moveq	r3, #1
 8002ddc:	2300      	movne	r3, #0
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	e015      	b.n	8002e0e <HAL_TIM_PWM_Start_DMA+0xd6>
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	2b08      	cmp	r3, #8
 8002de6:	d109      	bne.n	8002dfc <HAL_TIM_PWM_Start_DMA+0xc4>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	bf0c      	ite	eq
 8002df4:	2301      	moveq	r3, #1
 8002df6:	2300      	movne	r3, #0
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	e008      	b.n	8002e0e <HAL_TIM_PWM_Start_DMA+0xd6>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	bf0c      	ite	eq
 8002e08:	2301      	moveq	r3, #1
 8002e0a:	2300      	movne	r3, #0
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d024      	beq.n	8002e5c <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d104      	bne.n	8002e22 <HAL_TIM_PWM_Start_DMA+0xea>
 8002e18:	887b      	ldrh	r3, [r7, #2]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e10f      	b.n	8003042 <HAL_TIM_PWM_Start_DMA+0x30a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d104      	bne.n	8002e32 <HAL_TIM_PWM_Start_DMA+0xfa>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e30:	e016      	b.n	8002e60 <HAL_TIM_PWM_Start_DMA+0x128>
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	2b04      	cmp	r3, #4
 8002e36:	d104      	bne.n	8002e42 <HAL_TIM_PWM_Start_DMA+0x10a>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e40:	e00e      	b.n	8002e60 <HAL_TIM_PWM_Start_DMA+0x128>
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	2b08      	cmp	r3, #8
 8002e46:	d104      	bne.n	8002e52 <HAL_TIM_PWM_Start_DMA+0x11a>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e50:	e006      	b.n	8002e60 <HAL_TIM_PWM_Start_DMA+0x128>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2202      	movs	r2, #2
 8002e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e5a:	e001      	b.n	8002e60 <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e0f0      	b.n	8003042 <HAL_TIM_PWM_Start_DMA+0x30a>
  }

  switch (Channel)
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	2b0c      	cmp	r3, #12
 8002e64:	f200 80ae 	bhi.w	8002fc4 <HAL_TIM_PWM_Start_DMA+0x28c>
 8002e68:	a201      	add	r2, pc, #4	; (adr r2, 8002e70 <HAL_TIM_PWM_Start_DMA+0x138>)
 8002e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e6e:	bf00      	nop
 8002e70:	08002ea5 	.word	0x08002ea5
 8002e74:	08002fc5 	.word	0x08002fc5
 8002e78:	08002fc5 	.word	0x08002fc5
 8002e7c:	08002fc5 	.word	0x08002fc5
 8002e80:	08002eed 	.word	0x08002eed
 8002e84:	08002fc5 	.word	0x08002fc5
 8002e88:	08002fc5 	.word	0x08002fc5
 8002e8c:	08002fc5 	.word	0x08002fc5
 8002e90:	08002f35 	.word	0x08002f35
 8002e94:	08002fc5 	.word	0x08002fc5
 8002e98:	08002fc5 	.word	0x08002fc5
 8002e9c:	08002fc5 	.word	0x08002fc5
 8002ea0:	08002f7d 	.word	0x08002f7d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea8:	4a68      	ldr	r2, [pc, #416]	; (800304c <HAL_TIM_PWM_Start_DMA+0x314>)
 8002eaa:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	4a67      	ldr	r2, [pc, #412]	; (8003050 <HAL_TIM_PWM_Start_DMA+0x318>)
 8002eb2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	4a66      	ldr	r2, [pc, #408]	; (8003054 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8002eba:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002ec0:	6879      	ldr	r1, [r7, #4]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	3334      	adds	r3, #52	; 0x34
 8002ec8:	461a      	mov	r2, r3
 8002eca:	887b      	ldrh	r3, [r7, #2]
 8002ecc:	f7fe ff1e 	bl	8001d0c <HAL_DMA_Start_IT>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <HAL_TIM_PWM_Start_DMA+0x1a2>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e0b3      	b.n	8003042 <HAL_TIM_PWM_Start_DMA+0x30a>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68da      	ldr	r2, [r3, #12]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ee8:	60da      	str	r2, [r3, #12]
      break;
 8002eea:	e06c      	b.n	8002fc6 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef0:	4a56      	ldr	r2, [pc, #344]	; (800304c <HAL_TIM_PWM_Start_DMA+0x314>)
 8002ef2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef8:	4a55      	ldr	r2, [pc, #340]	; (8003050 <HAL_TIM_PWM_Start_DMA+0x318>)
 8002efa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f00:	4a54      	ldr	r2, [pc, #336]	; (8003054 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8002f02:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002f08:	6879      	ldr	r1, [r7, #4]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	3338      	adds	r3, #56	; 0x38
 8002f10:	461a      	mov	r2, r3
 8002f12:	887b      	ldrh	r3, [r7, #2]
 8002f14:	f7fe fefa 	bl	8001d0c <HAL_DMA_Start_IT>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <HAL_TIM_PWM_Start_DMA+0x1ea>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e08f      	b.n	8003042 <HAL_TIM_PWM_Start_DMA+0x30a>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68da      	ldr	r2, [r3, #12]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f30:	60da      	str	r2, [r3, #12]
      break;
 8002f32:	e048      	b.n	8002fc6 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f38:	4a44      	ldr	r2, [pc, #272]	; (800304c <HAL_TIM_PWM_Start_DMA+0x314>)
 8002f3a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f40:	4a43      	ldr	r2, [pc, #268]	; (8003050 <HAL_TIM_PWM_Start_DMA+0x318>)
 8002f42:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f48:	4a42      	ldr	r2, [pc, #264]	; (8003054 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8002f4a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	333c      	adds	r3, #60	; 0x3c
 8002f58:	461a      	mov	r2, r3
 8002f5a:	887b      	ldrh	r3, [r7, #2]
 8002f5c:	f7fe fed6 	bl	8001d0c <HAL_DMA_Start_IT>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <HAL_TIM_PWM_Start_DMA+0x232>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e06b      	b.n	8003042 <HAL_TIM_PWM_Start_DMA+0x30a>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68da      	ldr	r2, [r3, #12]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f78:	60da      	str	r2, [r3, #12]
      break;
 8002f7a:	e024      	b.n	8002fc6 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f80:	4a32      	ldr	r2, [pc, #200]	; (800304c <HAL_TIM_PWM_Start_DMA+0x314>)
 8002f82:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f88:	4a31      	ldr	r2, [pc, #196]	; (8003050 <HAL_TIM_PWM_Start_DMA+0x318>)
 8002f8a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f90:	4a30      	ldr	r2, [pc, #192]	; (8003054 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8002f92:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002f98:	6879      	ldr	r1, [r7, #4]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	3340      	adds	r3, #64	; 0x40
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	887b      	ldrh	r3, [r7, #2]
 8002fa4:	f7fe feb2 	bl	8001d0c <HAL_DMA_Start_IT>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <HAL_TIM_PWM_Start_DMA+0x27a>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e047      	b.n	8003042 <HAL_TIM_PWM_Start_DMA+0x30a>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68da      	ldr	r2, [r3, #12]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002fc0:	60da      	str	r2, [r3, #12]
      break;
 8002fc2:	e000      	b.n	8002fc6 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 8002fc4:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	68b9      	ldr	r1, [r7, #8]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 fde0 	bl	8003b94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a1f      	ldr	r2, [pc, #124]	; (8003058 <HAL_TIM_PWM_Start_DMA+0x320>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d107      	bne.n	8002fee <HAL_TIM_PWM_Start_DMA+0x2b6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a19      	ldr	r2, [pc, #100]	; (8003058 <HAL_TIM_PWM_Start_DMA+0x320>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d009      	beq.n	800300c <HAL_TIM_PWM_Start_DMA+0x2d4>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003000:	d004      	beq.n	800300c <HAL_TIM_PWM_Start_DMA+0x2d4>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a15      	ldr	r2, [pc, #84]	; (800305c <HAL_TIM_PWM_Start_DMA+0x324>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d111      	bne.n	8003030 <HAL_TIM_PWM_Start_DMA+0x2f8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 0307 	and.w	r3, r3, #7
 8003016:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	2b06      	cmp	r3, #6
 800301c:	d010      	beq.n	8003040 <HAL_TIM_PWM_Start_DMA+0x308>
    {
      __HAL_TIM_ENABLE(htim);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f042 0201 	orr.w	r2, r2, #1
 800302c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800302e:	e007      	b.n	8003040 <HAL_TIM_PWM_Start_DMA+0x308>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f042 0201 	orr.w	r2, r2, #1
 800303e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3718      	adds	r7, #24
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	08003597 	.word	0x08003597
 8003050:	0800363f 	.word	0x0800363f
 8003054:	08003505 	.word	0x08003505
 8003058:	40012c00 	.word	0x40012c00
 800305c:	40000400 	.word	0x40000400

08003060 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	2b0c      	cmp	r3, #12
 800306e:	d855      	bhi.n	800311c <HAL_TIM_PWM_Stop_DMA+0xbc>
 8003070:	a201      	add	r2, pc, #4	; (adr r2, 8003078 <HAL_TIM_PWM_Stop_DMA+0x18>)
 8003072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003076:	bf00      	nop
 8003078:	080030ad 	.word	0x080030ad
 800307c:	0800311d 	.word	0x0800311d
 8003080:	0800311d 	.word	0x0800311d
 8003084:	0800311d 	.word	0x0800311d
 8003088:	080030c9 	.word	0x080030c9
 800308c:	0800311d 	.word	0x0800311d
 8003090:	0800311d 	.word	0x0800311d
 8003094:	0800311d 	.word	0x0800311d
 8003098:	080030e5 	.word	0x080030e5
 800309c:	0800311d 	.word	0x0800311d
 80030a0:	0800311d 	.word	0x0800311d
 80030a4:	0800311d 	.word	0x0800311d
 80030a8:	08003101 	.word	0x08003101
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68da      	ldr	r2, [r3, #12]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80030ba:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7fe fe83 	bl	8001dcc <HAL_DMA_Abort_IT>
      break;
 80030c6:	e02a      	b.n	800311e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030d6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030dc:	4618      	mov	r0, r3
 80030de:	f7fe fe75 	bl	8001dcc <HAL_DMA_Abort_IT>
      break;
 80030e2:	e01c      	b.n	800311e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68da      	ldr	r2, [r3, #12]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030f2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7fe fe67 	bl	8001dcc <HAL_DMA_Abort_IT>
      break;
 80030fe:	e00e      	b.n	800311e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68da      	ldr	r2, [r3, #12]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800310e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003114:	4618      	mov	r0, r3
 8003116:	f7fe fe59 	bl	8001dcc <HAL_DMA_Abort_IT>
      break;
 800311a:	e000      	b.n	800311e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 800311c:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2200      	movs	r2, #0
 8003124:	6839      	ldr	r1, [r7, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f000 fd34 	bl	8003b94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a29      	ldr	r2, [pc, #164]	; (80031d8 <HAL_TIM_PWM_Stop_DMA+0x178>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d117      	bne.n	8003166 <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6a1a      	ldr	r2, [r3, #32]
 800313c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003140:	4013      	ands	r3, r2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10f      	bne.n	8003166 <HAL_TIM_PWM_Stop_DMA+0x106>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6a1a      	ldr	r2, [r3, #32]
 800314c:	f240 4344 	movw	r3, #1092	; 0x444
 8003150:	4013      	ands	r3, r2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d107      	bne.n	8003166 <HAL_TIM_PWM_Stop_DMA+0x106>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003164:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	6a1a      	ldr	r2, [r3, #32]
 800316c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003170:	4013      	ands	r3, r2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10f      	bne.n	8003196 <HAL_TIM_PWM_Stop_DMA+0x136>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6a1a      	ldr	r2, [r3, #32]
 800317c:	f240 4344 	movw	r3, #1092	; 0x444
 8003180:	4013      	ands	r3, r2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d107      	bne.n	8003196 <HAL_TIM_PWM_Stop_DMA+0x136>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 0201 	bic.w	r2, r2, #1
 8003194:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d104      	bne.n	80031a6 <HAL_TIM_PWM_Stop_DMA+0x146>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031a4:	e013      	b.n	80031ce <HAL_TIM_PWM_Stop_DMA+0x16e>
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	2b04      	cmp	r3, #4
 80031aa:	d104      	bne.n	80031b6 <HAL_TIM_PWM_Stop_DMA+0x156>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031b4:	e00b      	b.n	80031ce <HAL_TIM_PWM_Stop_DMA+0x16e>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d104      	bne.n	80031c6 <HAL_TIM_PWM_Stop_DMA+0x166>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031c4:	e003      	b.n	80031ce <HAL_TIM_PWM_Stop_DMA+0x16e>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3708      	adds	r7, #8
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	40012c00 	.word	0x40012c00

080031dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d101      	bne.n	80031f6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80031f2:	2302      	movs	r3, #2
 80031f4:	e0ac      	b.n	8003350 <HAL_TIM_PWM_ConfigChannel+0x174>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b0c      	cmp	r3, #12
 8003202:	f200 809f 	bhi.w	8003344 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003206:	a201      	add	r2, pc, #4	; (adr r2, 800320c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800320c:	08003241 	.word	0x08003241
 8003210:	08003345 	.word	0x08003345
 8003214:	08003345 	.word	0x08003345
 8003218:	08003345 	.word	0x08003345
 800321c:	08003281 	.word	0x08003281
 8003220:	08003345 	.word	0x08003345
 8003224:	08003345 	.word	0x08003345
 8003228:	08003345 	.word	0x08003345
 800322c:	080032c3 	.word	0x080032c3
 8003230:	08003345 	.word	0x08003345
 8003234:	08003345 	.word	0x08003345
 8003238:	08003345 	.word	0x08003345
 800323c:	08003303 	.word	0x08003303
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68b9      	ldr	r1, [r7, #8]
 8003246:	4618      	mov	r0, r3
 8003248:	f000 fa86 	bl	8003758 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	699a      	ldr	r2, [r3, #24]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f042 0208 	orr.w	r2, r2, #8
 800325a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	699a      	ldr	r2, [r3, #24]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0204 	bic.w	r2, r2, #4
 800326a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6999      	ldr	r1, [r3, #24]
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	691a      	ldr	r2, [r3, #16]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	619a      	str	r2, [r3, #24]
      break;
 800327e:	e062      	b.n	8003346 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68b9      	ldr	r1, [r7, #8]
 8003286:	4618      	mov	r0, r3
 8003288:	f000 facc 	bl	8003824 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	699a      	ldr	r2, [r3, #24]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800329a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	699a      	ldr	r2, [r3, #24]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6999      	ldr	r1, [r3, #24]
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	021a      	lsls	r2, r3, #8
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	619a      	str	r2, [r3, #24]
      break;
 80032c0:	e041      	b.n	8003346 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68b9      	ldr	r1, [r7, #8]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f000 fb15 	bl	80038f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	69da      	ldr	r2, [r3, #28]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f042 0208 	orr.w	r2, r2, #8
 80032dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	69da      	ldr	r2, [r3, #28]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f022 0204 	bic.w	r2, r2, #4
 80032ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	69d9      	ldr	r1, [r3, #28]
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	691a      	ldr	r2, [r3, #16]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	61da      	str	r2, [r3, #28]
      break;
 8003300:	e021      	b.n	8003346 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68b9      	ldr	r1, [r7, #8]
 8003308:	4618      	mov	r0, r3
 800330a:	f000 fb5f 	bl	80039cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	69da      	ldr	r2, [r3, #28]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800331c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	69da      	ldr	r2, [r3, #28]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800332c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	69d9      	ldr	r1, [r3, #28]
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	021a      	lsls	r2, r3, #8
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	430a      	orrs	r2, r1
 8003340:	61da      	str	r2, [r3, #28]
      break;
 8003342:	e000      	b.n	8003346 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003344:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003368:	2b01      	cmp	r3, #1
 800336a:	d101      	bne.n	8003370 <HAL_TIM_ConfigClockSource+0x18>
 800336c:	2302      	movs	r3, #2
 800336e:	e0b3      	b.n	80034d8 <HAL_TIM_ConfigClockSource+0x180>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2202      	movs	r2, #2
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800338e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003396:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033a8:	d03e      	beq.n	8003428 <HAL_TIM_ConfigClockSource+0xd0>
 80033aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033ae:	f200 8087 	bhi.w	80034c0 <HAL_TIM_ConfigClockSource+0x168>
 80033b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033b6:	f000 8085 	beq.w	80034c4 <HAL_TIM_ConfigClockSource+0x16c>
 80033ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033be:	d87f      	bhi.n	80034c0 <HAL_TIM_ConfigClockSource+0x168>
 80033c0:	2b70      	cmp	r3, #112	; 0x70
 80033c2:	d01a      	beq.n	80033fa <HAL_TIM_ConfigClockSource+0xa2>
 80033c4:	2b70      	cmp	r3, #112	; 0x70
 80033c6:	d87b      	bhi.n	80034c0 <HAL_TIM_ConfigClockSource+0x168>
 80033c8:	2b60      	cmp	r3, #96	; 0x60
 80033ca:	d050      	beq.n	800346e <HAL_TIM_ConfigClockSource+0x116>
 80033cc:	2b60      	cmp	r3, #96	; 0x60
 80033ce:	d877      	bhi.n	80034c0 <HAL_TIM_ConfigClockSource+0x168>
 80033d0:	2b50      	cmp	r3, #80	; 0x50
 80033d2:	d03c      	beq.n	800344e <HAL_TIM_ConfigClockSource+0xf6>
 80033d4:	2b50      	cmp	r3, #80	; 0x50
 80033d6:	d873      	bhi.n	80034c0 <HAL_TIM_ConfigClockSource+0x168>
 80033d8:	2b40      	cmp	r3, #64	; 0x40
 80033da:	d058      	beq.n	800348e <HAL_TIM_ConfigClockSource+0x136>
 80033dc:	2b40      	cmp	r3, #64	; 0x40
 80033de:	d86f      	bhi.n	80034c0 <HAL_TIM_ConfigClockSource+0x168>
 80033e0:	2b30      	cmp	r3, #48	; 0x30
 80033e2:	d064      	beq.n	80034ae <HAL_TIM_ConfigClockSource+0x156>
 80033e4:	2b30      	cmp	r3, #48	; 0x30
 80033e6:	d86b      	bhi.n	80034c0 <HAL_TIM_ConfigClockSource+0x168>
 80033e8:	2b20      	cmp	r3, #32
 80033ea:	d060      	beq.n	80034ae <HAL_TIM_ConfigClockSource+0x156>
 80033ec:	2b20      	cmp	r3, #32
 80033ee:	d867      	bhi.n	80034c0 <HAL_TIM_ConfigClockSource+0x168>
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d05c      	beq.n	80034ae <HAL_TIM_ConfigClockSource+0x156>
 80033f4:	2b10      	cmp	r3, #16
 80033f6:	d05a      	beq.n	80034ae <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80033f8:	e062      	b.n	80034c0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6818      	ldr	r0, [r3, #0]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	6899      	ldr	r1, [r3, #8]
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	f000 fba4 	bl	8003b56 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800341c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	609a      	str	r2, [r3, #8]
      break;
 8003426:	e04e      	b.n	80034c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6818      	ldr	r0, [r3, #0]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	6899      	ldr	r1, [r3, #8]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	f000 fb8d 	bl	8003b56 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689a      	ldr	r2, [r3, #8]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800344a:	609a      	str	r2, [r3, #8]
      break;
 800344c:	e03b      	b.n	80034c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6818      	ldr	r0, [r3, #0]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	6859      	ldr	r1, [r3, #4]
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	461a      	mov	r2, r3
 800345c:	f000 fb04 	bl	8003a68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2150      	movs	r1, #80	; 0x50
 8003466:	4618      	mov	r0, r3
 8003468:	f000 fb5b 	bl	8003b22 <TIM_ITRx_SetConfig>
      break;
 800346c:	e02b      	b.n	80034c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6818      	ldr	r0, [r3, #0]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	6859      	ldr	r1, [r3, #4]
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	461a      	mov	r2, r3
 800347c:	f000 fb22 	bl	8003ac4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2160      	movs	r1, #96	; 0x60
 8003486:	4618      	mov	r0, r3
 8003488:	f000 fb4b 	bl	8003b22 <TIM_ITRx_SetConfig>
      break;
 800348c:	e01b      	b.n	80034c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6818      	ldr	r0, [r3, #0]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	6859      	ldr	r1, [r3, #4]
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	461a      	mov	r2, r3
 800349c:	f000 fae4 	bl	8003a68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2140      	movs	r1, #64	; 0x40
 80034a6:	4618      	mov	r0, r3
 80034a8:	f000 fb3b 	bl	8003b22 <TIM_ITRx_SetConfig>
      break;
 80034ac:	e00b      	b.n	80034c6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4619      	mov	r1, r3
 80034b8:	4610      	mov	r0, r2
 80034ba:	f000 fb32 	bl	8003b22 <TIM_ITRx_SetConfig>
        break;
 80034be:	e002      	b.n	80034c6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80034c0:	bf00      	nop
 80034c2:	e000      	b.n	80034c6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80034c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bc80      	pop	{r7}
 80034f0:	4770      	bx	lr

080034f2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b083      	sub	sp, #12
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80034fa:	bf00      	nop
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	bc80      	pop	{r7}
 8003502:	4770      	bx	lr

08003504 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	429a      	cmp	r2, r3
 800351a:	d107      	bne.n	800352c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2201      	movs	r2, #1
 8003520:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800352a:	e02a      	b.n	8003582 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	429a      	cmp	r2, r3
 8003534:	d107      	bne.n	8003546 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2202      	movs	r2, #2
 800353a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003544:	e01d      	b.n	8003582 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	429a      	cmp	r2, r3
 800354e:	d107      	bne.n	8003560 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2204      	movs	r2, #4
 8003554:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800355e:	e010      	b.n	8003582 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	429a      	cmp	r2, r3
 8003568:	d107      	bne.n	800357a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2208      	movs	r2, #8
 800356e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003578:	e003      	b.n	8003582 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f7ff ffb5 	bl	80034f2 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	771a      	strb	r2, [r3, #28]
}
 800358e:	bf00      	nop
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b084      	sub	sp, #16
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d10b      	bne.n	80035c6 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2201      	movs	r2, #1
 80035b2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d136      	bne.n	800362a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035c4:	e031      	b.n	800362a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d10b      	bne.n	80035e8 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2202      	movs	r2, #2
 80035d4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d125      	bne.n	800362a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035e6:	e020      	b.n	800362a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d10b      	bne.n	800360a <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2204      	movs	r2, #4
 80035f6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d114      	bne.n	800362a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003608:	e00f      	b.n	800362a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	429a      	cmp	r2, r3
 8003612:	d10a      	bne.n	800362a <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2208      	movs	r2, #8
 8003618:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d103      	bne.n	800362a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f7fd fbde 	bl	8000dec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	771a      	strb	r2, [r3, #28]
}
 8003636:	bf00      	nop
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b084      	sub	sp, #16
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	429a      	cmp	r2, r3
 8003654:	d103      	bne.n	800365e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2201      	movs	r2, #1
 800365a:	771a      	strb	r2, [r3, #28]
 800365c:	e019      	b.n	8003692 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	429a      	cmp	r2, r3
 8003666:	d103      	bne.n	8003670 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2202      	movs	r2, #2
 800366c:	771a      	strb	r2, [r3, #28]
 800366e:	e010      	b.n	8003692 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	429a      	cmp	r2, r3
 8003678:	d103      	bne.n	8003682 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2204      	movs	r2, #4
 800367e:	771a      	strb	r2, [r3, #28]
 8003680:	e007      	b.n	8003692 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	429a      	cmp	r2, r3
 800368a:	d102      	bne.n	8003692 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2208      	movs	r2, #8
 8003690:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f7ff ff24 	bl	80034e0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	771a      	strb	r2, [r3, #28]
}
 800369e:	bf00      	nop
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
	...

080036a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a25      	ldr	r2, [pc, #148]	; (8003750 <TIM_Base_SetConfig+0xa8>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d007      	beq.n	80036d0 <TIM_Base_SetConfig+0x28>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c6:	d003      	beq.n	80036d0 <TIM_Base_SetConfig+0x28>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a22      	ldr	r2, [pc, #136]	; (8003754 <TIM_Base_SetConfig+0xac>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d108      	bne.n	80036e2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	4313      	orrs	r3, r2
 80036e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a1a      	ldr	r2, [pc, #104]	; (8003750 <TIM_Base_SetConfig+0xa8>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d007      	beq.n	80036fa <TIM_Base_SetConfig+0x52>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036f0:	d003      	beq.n	80036fa <TIM_Base_SetConfig+0x52>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a17      	ldr	r2, [pc, #92]	; (8003754 <TIM_Base_SetConfig+0xac>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d108      	bne.n	800370c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003700:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	4313      	orrs	r3, r2
 800370a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	4313      	orrs	r3, r2
 8003718:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a07      	ldr	r2, [pc, #28]	; (8003750 <TIM_Base_SetConfig+0xa8>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d103      	bne.n	8003740 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	691a      	ldr	r2, [r3, #16]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	615a      	str	r2, [r3, #20]
}
 8003746:	bf00      	nop
 8003748:	3714      	adds	r7, #20
 800374a:	46bd      	mov	sp, r7
 800374c:	bc80      	pop	{r7}
 800374e:	4770      	bx	lr
 8003750:	40012c00 	.word	0x40012c00
 8003754:	40000400 	.word	0x40000400

08003758 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003758:	b480      	push	{r7}
 800375a:	b087      	sub	sp, #28
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	f023 0201 	bic.w	r2, r3, #1
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f023 0303 	bic.w	r3, r3, #3
 800378e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	4313      	orrs	r3, r2
 8003798:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	f023 0302 	bic.w	r3, r3, #2
 80037a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a1c      	ldr	r2, [pc, #112]	; (8003820 <TIM_OC1_SetConfig+0xc8>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d10c      	bne.n	80037ce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	f023 0308 	bic.w	r3, r3, #8
 80037ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	f023 0304 	bic.w	r3, r3, #4
 80037cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a13      	ldr	r2, [pc, #76]	; (8003820 <TIM_OC1_SetConfig+0xc8>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d111      	bne.n	80037fa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	621a      	str	r2, [r3, #32]
}
 8003814:	bf00      	nop
 8003816:	371c      	adds	r7, #28
 8003818:	46bd      	mov	sp, r7
 800381a:	bc80      	pop	{r7}
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	40012c00 	.word	0x40012c00

08003824 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003824:	b480      	push	{r7}
 8003826:	b087      	sub	sp, #28
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	f023 0210 	bic.w	r2, r3, #16
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800385a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	021b      	lsls	r3, r3, #8
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	4313      	orrs	r3, r2
 8003866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	f023 0320 	bic.w	r3, r3, #32
 800386e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	011b      	lsls	r3, r3, #4
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	4313      	orrs	r3, r2
 800387a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a1d      	ldr	r2, [pc, #116]	; (80038f4 <TIM_OC2_SetConfig+0xd0>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d10d      	bne.n	80038a0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800388a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	011b      	lsls	r3, r3, #4
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	4313      	orrs	r3, r2
 8003896:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800389e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a14      	ldr	r2, [pc, #80]	; (80038f4 <TIM_OC2_SetConfig+0xd0>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d113      	bne.n	80038d0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	695b      	ldr	r3, [r3, #20]
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	621a      	str	r2, [r3, #32]
}
 80038ea:	bf00      	nop
 80038ec:	371c      	adds	r7, #28
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bc80      	pop	{r7}
 80038f2:	4770      	bx	lr
 80038f4:	40012c00 	.word	0x40012c00

080038f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b087      	sub	sp, #28
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	69db      	ldr	r3, [r3, #28]
 800391e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f023 0303 	bic.w	r3, r3, #3
 800392e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	4313      	orrs	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003940:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	021b      	lsls	r3, r3, #8
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	4313      	orrs	r3, r2
 800394c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a1d      	ldr	r2, [pc, #116]	; (80039c8 <TIM_OC3_SetConfig+0xd0>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d10d      	bne.n	8003972 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800395c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	021b      	lsls	r3, r3, #8
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	4313      	orrs	r3, r2
 8003968:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003970:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a14      	ldr	r2, [pc, #80]	; (80039c8 <TIM_OC3_SetConfig+0xd0>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d113      	bne.n	80039a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003980:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003988:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	011b      	lsls	r3, r3, #4
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	4313      	orrs	r3, r2
 8003994:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	011b      	lsls	r3, r3, #4
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	4313      	orrs	r3, r2
 80039a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685a      	ldr	r2, [r3, #4]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	621a      	str	r2, [r3, #32]
}
 80039bc:	bf00      	nop
 80039be:	371c      	adds	r7, #28
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bc80      	pop	{r7}
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	40012c00 	.word	0x40012c00

080039cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b087      	sub	sp, #28
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	021b      	lsls	r3, r3, #8
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	031b      	lsls	r3, r3, #12
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a0f      	ldr	r2, [pc, #60]	; (8003a64 <TIM_OC4_SetConfig+0x98>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d109      	bne.n	8003a40 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	695b      	ldr	r3, [r3, #20]
 8003a38:	019b      	lsls	r3, r3, #6
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	621a      	str	r2, [r3, #32]
}
 8003a5a:	bf00      	nop
 8003a5c:	371c      	adds	r7, #28
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bc80      	pop	{r7}
 8003a62:	4770      	bx	lr
 8003a64:	40012c00 	.word	0x40012c00

08003a68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b087      	sub	sp, #28
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	f023 0201 	bic.w	r2, r3, #1
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	011b      	lsls	r3, r3, #4
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f023 030a 	bic.w	r3, r3, #10
 8003aa4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	621a      	str	r2, [r3, #32]
}
 8003aba:	bf00      	nop
 8003abc:	371c      	adds	r7, #28
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bc80      	pop	{r7}
 8003ac2:	4770      	bx	lr

08003ac4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b087      	sub	sp, #28
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	f023 0210 	bic.w	r2, r3, #16
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003aee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	031b      	lsls	r3, r3, #12
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b00:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	011b      	lsls	r3, r3, #4
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	621a      	str	r2, [r3, #32]
}
 8003b18:	bf00      	nop
 8003b1a:	371c      	adds	r7, #28
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bc80      	pop	{r7}
 8003b20:	4770      	bx	lr

08003b22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b085      	sub	sp, #20
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
 8003b2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	f043 0307 	orr.w	r3, r3, #7
 8003b44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	609a      	str	r2, [r3, #8]
}
 8003b4c:	bf00      	nop
 8003b4e:	3714      	adds	r7, #20
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bc80      	pop	{r7}
 8003b54:	4770      	bx	lr

08003b56 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b087      	sub	sp, #28
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	60f8      	str	r0, [r7, #12]
 8003b5e:	60b9      	str	r1, [r7, #8]
 8003b60:	607a      	str	r2, [r7, #4]
 8003b62:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b70:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	021a      	lsls	r2, r3, #8
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	609a      	str	r2, [r3, #8]
}
 8003b8a:	bf00      	nop
 8003b8c:	371c      	adds	r7, #28
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bc80      	pop	{r7}
 8003b92:	4770      	bx	lr

08003b94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b087      	sub	sp, #28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	f003 031f 	and.w	r3, r3, #31
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6a1a      	ldr	r2, [r3, #32]
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	43db      	mvns	r3, r3
 8003bb6:	401a      	ands	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6a1a      	ldr	r2, [r3, #32]
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	f003 031f 	and.w	r3, r3, #31
 8003bc6:	6879      	ldr	r1, [r7, #4]
 8003bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bcc:	431a      	orrs	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	621a      	str	r2, [r3, #32]
}
 8003bd2:	bf00      	nop
 8003bd4:	371c      	adds	r7, #28
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bc80      	pop	{r7}
 8003bda:	4770      	bx	lr

08003bdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d101      	bne.n	8003bf4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	e041      	b.n	8003c78 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2202      	movs	r2, #2
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a14      	ldr	r2, [pc, #80]	; (8003c84 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d009      	beq.n	8003c4c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c40:	d004      	beq.n	8003c4c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a10      	ldr	r2, [pc, #64]	; (8003c88 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d10c      	bne.n	8003c66 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	68ba      	ldr	r2, [r7, #8]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68ba      	ldr	r2, [r7, #8]
 8003c64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3714      	adds	r7, #20
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bc80      	pop	{r7}
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	40012c00 	.word	0x40012c00
 8003c88:	40000400 	.word	0x40000400

08003c8c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003c96:	2300      	movs	r3, #0
 8003c98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d101      	bne.n	8003ca8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	e03d      	b.n	8003d24 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	69db      	ldr	r3, [r3, #28]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3714      	adds	r7, #20
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bc80      	pop	{r7}
 8003d2c:	4770      	bx	lr
	...

08003d30 <__libc_init_array>:
 8003d30:	b570      	push	{r4, r5, r6, lr}
 8003d32:	2600      	movs	r6, #0
 8003d34:	4d0c      	ldr	r5, [pc, #48]	; (8003d68 <__libc_init_array+0x38>)
 8003d36:	4c0d      	ldr	r4, [pc, #52]	; (8003d6c <__libc_init_array+0x3c>)
 8003d38:	1b64      	subs	r4, r4, r5
 8003d3a:	10a4      	asrs	r4, r4, #2
 8003d3c:	42a6      	cmp	r6, r4
 8003d3e:	d109      	bne.n	8003d54 <__libc_init_array+0x24>
 8003d40:	f000 f822 	bl	8003d88 <_init>
 8003d44:	2600      	movs	r6, #0
 8003d46:	4d0a      	ldr	r5, [pc, #40]	; (8003d70 <__libc_init_array+0x40>)
 8003d48:	4c0a      	ldr	r4, [pc, #40]	; (8003d74 <__libc_init_array+0x44>)
 8003d4a:	1b64      	subs	r4, r4, r5
 8003d4c:	10a4      	asrs	r4, r4, #2
 8003d4e:	42a6      	cmp	r6, r4
 8003d50:	d105      	bne.n	8003d5e <__libc_init_array+0x2e>
 8003d52:	bd70      	pop	{r4, r5, r6, pc}
 8003d54:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d58:	4798      	blx	r3
 8003d5a:	3601      	adds	r6, #1
 8003d5c:	e7ee      	b.n	8003d3c <__libc_init_array+0xc>
 8003d5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d62:	4798      	blx	r3
 8003d64:	3601      	adds	r6, #1
 8003d66:	e7f2      	b.n	8003d4e <__libc_init_array+0x1e>
 8003d68:	08003dc0 	.word	0x08003dc0
 8003d6c:	08003dc0 	.word	0x08003dc0
 8003d70:	08003dc0 	.word	0x08003dc0
 8003d74:	08003dc4 	.word	0x08003dc4

08003d78 <memset>:
 8003d78:	4603      	mov	r3, r0
 8003d7a:	4402      	add	r2, r0
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d100      	bne.n	8003d82 <memset+0xa>
 8003d80:	4770      	bx	lr
 8003d82:	f803 1b01 	strb.w	r1, [r3], #1
 8003d86:	e7f9      	b.n	8003d7c <memset+0x4>

08003d88 <_init>:
 8003d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d8a:	bf00      	nop
 8003d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d8e:	bc08      	pop	{r3}
 8003d90:	469e      	mov	lr, r3
 8003d92:	4770      	bx	lr

08003d94 <_fini>:
 8003d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d96:	bf00      	nop
 8003d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d9a:	bc08      	pop	{r3}
 8003d9c:	469e      	mov	lr, r3
 8003d9e:	4770      	bx	lr
